# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VexApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def export_project_as_cyclone_dx1(self, uuid, **kwargs):  # noqa: E501
        """Returns a VEX for a project in CycloneDX format  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_project_as_cyclone_dx1(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to export (required)
        :param bool download: Force the resulting VEX to be downloaded as a file (defaults to 'false')
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_project_as_cyclone_dx1_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.export_project_as_cyclone_dx1_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def export_project_as_cyclone_dx1_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a VEX for a project in CycloneDX format  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_project_as_cyclone_dx1_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to export (required)
        :param bool download: Force the resulting VEX to be downloaded as a file (defaults to 'false')
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'download']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_project_as_cyclone_dx1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `export_project_as_cyclone_dx1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'download' in params:
            query_params.append(('download', params['download']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.cyclonedx+json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vex/cyclonedx/project/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_vex(self, **kwargs):  # noqa: E501
        """Upload a supported VEX document  # noqa: E501

        <p>   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the <code>projectName</code> and <code>projectVersion</code> must be specified. </p> <p>   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response's content type will be <code>application/problem+json</code>. </p> <p>   The maximum allowed length of the <code>vex</code> value is 20'000'000 characters.   When uploading large VEX files, the <code>POST</code> endpoint is preferred,   as it does not have this limit. </p> <p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_vex(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VexSubmitRequest body:
        :return: BomUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_vex_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.upload_vex_with_http_info(**kwargs)  # noqa: E501
            return data

    def upload_vex_with_http_info(self, **kwargs):  # noqa: E501
        """Upload a supported VEX document  # noqa: E501

        <p>   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the <code>projectName</code> and <code>projectVersion</code> must be specified. </p> <p>   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response's content type will be <code>application/problem+json</code>. </p> <p>   The maximum allowed length of the <code>vex</code> value is 20'000'000 characters.   When uploading large VEX files, the <code>POST</code> endpoint is preferred,   as it does not have this limit. </p> <p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_vex_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VexSubmitRequest body:
        :return: BomUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_vex" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vex', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BomUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_vex1(self, **kwargs):  # noqa: E501
        """Upload a supported VEX document  # noqa: E501

        <p>   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the <code>projectName</code> and <code>projectVersion</code> must be specified. </p> <p>   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response's content type will be <code>application/problem+json</code>. </p> <p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_vex1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project:
        :param str project_name:
        :param str project_version:
        :param str vex:
        :return: BomUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_vex1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.upload_vex1_with_http_info(**kwargs)  # noqa: E501
            return data

    def upload_vex1_with_http_info(self, **kwargs):  # noqa: E501
        """Upload a supported VEX document  # noqa: E501

        <p>   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the <code>projectName</code> and <code>projectVersion</code> must be specified. </p> <p>   The VEX will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response's content type will be <code>application/problem+json</code>. </p> <p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_vex1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project:
        :param str project_name:
        :param str project_version:
        :param str vex:
        :return: BomUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project', 'project_name', 'project_version', 'vex']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_vex1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'project' in params:
            form_params.append(('project', params['project']))  # noqa: E501
        if 'project_name' in params:
            form_params.append(('projectName', params['project_name']))  # noqa: E501
        if 'project_version' in params:
            form_params.append(('projectVersion', params['project_version']))  # noqa: E501
        if 'vex' in params:
            form_params.append(('vex', params['vex']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vex', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BomUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
