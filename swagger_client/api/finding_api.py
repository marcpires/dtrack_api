# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FindingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def analyze_project(self, uuid, **kwargs):  # noqa: E501
        """Triggers Vulnerability Analysis on a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyze_project(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to analyze (required)
        :return: BomUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyze_project_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.analyze_project_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def analyze_project_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Triggers Vulnerability Analysis on a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyze_project_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to analyze (required)
        :return: BomUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyze_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `analyze_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/finding/project/{uuid}/analyze', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BomUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_findings_by_project(self, uuid, **kwargs):  # noqa: E501
        """Returns the findings for the specified project as FPF  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_findings_by_project(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_findings_by_project_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.export_findings_by_project_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def export_findings_by_project_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns the findings for the specified project as FPF  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_findings_by_project_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_findings_by_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `export_findings_by_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/finding/project/{uuid}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_findings(self, **kwargs):  # noqa: E501
        """Returns a list of all findings grouped by vulnerability  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_findings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool show_inactive: Show inactive projects
        :param str severity: Filter by severity
        :param str publish_date_from: Filter published from this date
        :param str publish_date_to: Filter published to this date
        :param str text_search_field: Filter the text input in these fields
        :param str text_search_input: Filter by this text input
        :param str cvssv2_from: Filter CVSSv2 from this value
        :param str cvssv2_to: Filter CVSSv2 to this value
        :param str cvssv3_from: Filter CVSSv3 from this value
        :param str cvssv3_to: Filter CVSSv3 to this value
        :param str occurrences_from: Filter occurrences in projects from this value
        :param str occurrences_to: Filter occurrences in projects to this value
        :return: list[Finding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_findings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_findings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_findings_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all findings grouped by vulnerability  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_findings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool show_inactive: Show inactive projects
        :param str severity: Filter by severity
        :param str publish_date_from: Filter published from this date
        :param str publish_date_to: Filter published to this date
        :param str text_search_field: Filter the text input in these fields
        :param str text_search_input: Filter by this text input
        :param str cvssv2_from: Filter CVSSv2 from this value
        :param str cvssv2_to: Filter CVSSv2 to this value
        :param str cvssv3_from: Filter CVSSv3 from this value
        :param str cvssv3_to: Filter CVSSv3 to this value
        :param str occurrences_from: Filter occurrences in projects from this value
        :param str occurrences_to: Filter occurrences in projects to this value
        :return: list[Finding]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['show_inactive', 'severity', 'publish_date_from', 'publish_date_to', 'text_search_field', 'text_search_input', 'cvssv2_from', 'cvssv2_to', 'cvssv3_from', 'cvssv3_to', 'occurrences_from', 'occurrences_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_findings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'show_inactive' in params:
            query_params.append(('showInactive', params['show_inactive']))  # noqa: E501
        if 'severity' in params:
            query_params.append(('severity', params['severity']))  # noqa: E501
        if 'publish_date_from' in params:
            query_params.append(('publishDateFrom', params['publish_date_from']))  # noqa: E501
        if 'publish_date_to' in params:
            query_params.append(('publishDateTo', params['publish_date_to']))  # noqa: E501
        if 'text_search_field' in params:
            query_params.append(('textSearchField', params['text_search_field']))  # noqa: E501
        if 'text_search_input' in params:
            query_params.append(('textSearchInput', params['text_search_input']))  # noqa: E501
        if 'cvssv2_from' in params:
            query_params.append(('cvssv2From', params['cvssv2_from']))  # noqa: E501
        if 'cvssv2_to' in params:
            query_params.append(('cvssv2To', params['cvssv2_to']))  # noqa: E501
        if 'cvssv3_from' in params:
            query_params.append(('cvssv3From', params['cvssv3_from']))  # noqa: E501
        if 'cvssv3_to' in params:
            query_params.append(('cvssv3To', params['cvssv3_to']))  # noqa: E501
        if 'occurrences_from' in params:
            query_params.append(('occurrencesFrom', params['occurrences_from']))  # noqa: E501
        if 'occurrences_to' in params:
            query_params.append(('occurrencesTo', params['occurrences_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/finding/grouped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Finding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_findings1(self, **kwargs):  # noqa: E501
        """Returns a list of all findings  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_findings1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool show_inactive: Show inactive projects
        :param bool show_suppressed: Show suppressed findings
        :param str severity: Filter by severity
        :param str analysis_status: Filter by analysis status
        :param str vendor_response: Filter by vendor response
        :param str publish_date_from: Filter published from this date
        :param str publish_date_to: Filter published to this date
        :param str attributed_on_date_from: Filter attributed on from this date
        :param str attributed_on_date_to: Filter attributed on to this date
        :param str text_search_field: Filter the text input in these fields
        :param str text_search_input: Filter by this text input
        :param str cvssv2_from: Filter CVSSv2 from this value
        :param str cvssv2_to: Filter CVSSv2 from this Value
        :param str cvssv3_from: Filter CVSSv3 from this value
        :param str cvssv3_to: Filter CVSSv3 from this Value
        :return: list[Finding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_findings1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_findings1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_findings1_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all findings  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_findings1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool show_inactive: Show inactive projects
        :param bool show_suppressed: Show suppressed findings
        :param str severity: Filter by severity
        :param str analysis_status: Filter by analysis status
        :param str vendor_response: Filter by vendor response
        :param str publish_date_from: Filter published from this date
        :param str publish_date_to: Filter published to this date
        :param str attributed_on_date_from: Filter attributed on from this date
        :param str attributed_on_date_to: Filter attributed on to this date
        :param str text_search_field: Filter the text input in these fields
        :param str text_search_input: Filter by this text input
        :param str cvssv2_from: Filter CVSSv2 from this value
        :param str cvssv2_to: Filter CVSSv2 from this Value
        :param str cvssv3_from: Filter CVSSv3 from this value
        :param str cvssv3_to: Filter CVSSv3 from this Value
        :return: list[Finding]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['show_inactive', 'show_suppressed', 'severity', 'analysis_status', 'vendor_response', 'publish_date_from', 'publish_date_to', 'attributed_on_date_from', 'attributed_on_date_to', 'text_search_field', 'text_search_input', 'cvssv2_from', 'cvssv2_to', 'cvssv3_from', 'cvssv3_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_findings1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'show_inactive' in params:
            query_params.append(('showInactive', params['show_inactive']))  # noqa: E501
        if 'show_suppressed' in params:
            query_params.append(('showSuppressed', params['show_suppressed']))  # noqa: E501
        if 'severity' in params:
            query_params.append(('severity', params['severity']))  # noqa: E501
        if 'analysis_status' in params:
            query_params.append(('analysisStatus', params['analysis_status']))  # noqa: E501
        if 'vendor_response' in params:
            query_params.append(('vendorResponse', params['vendor_response']))  # noqa: E501
        if 'publish_date_from' in params:
            query_params.append(('publishDateFrom', params['publish_date_from']))  # noqa: E501
        if 'publish_date_to' in params:
            query_params.append(('publishDateTo', params['publish_date_to']))  # noqa: E501
        if 'attributed_on_date_from' in params:
            query_params.append(('attributedOnDateFrom', params['attributed_on_date_from']))  # noqa: E501
        if 'attributed_on_date_to' in params:
            query_params.append(('attributedOnDateTo', params['attributed_on_date_to']))  # noqa: E501
        if 'text_search_field' in params:
            query_params.append(('textSearchField', params['text_search_field']))  # noqa: E501
        if 'text_search_input' in params:
            query_params.append(('textSearchInput', params['text_search_input']))  # noqa: E501
        if 'cvssv2_from' in params:
            query_params.append(('cvssv2From', params['cvssv2_from']))  # noqa: E501
        if 'cvssv2_to' in params:
            query_params.append(('cvssv2To', params['cvssv2_to']))  # noqa: E501
        if 'cvssv3_from' in params:
            query_params.append(('cvssv3From', params['cvssv3_from']))  # noqa: E501
        if 'cvssv3_to' in params:
            query_params.append(('cvssv3To', params['cvssv3_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/finding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Finding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_findings_by_project(self, uuid, **kwargs):  # noqa: E501
        """Returns a list of all findings for a specific project or generates SARIF file if Accept: application/sarif+json header is provided  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_findings_by_project(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project (required)
        :param bool suppressed: Optionally includes suppressed findings
        :param str source: Optionally limit findings to specific sources of vulnerability intelligence
        :param str accept:
        :return: list[Finding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_findings_by_project_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_findings_by_project_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_findings_by_project_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a list of all findings for a specific project or generates SARIF file if Accept: application/sarif+json header is provided  # noqa: E501

        <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_findings_by_project_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project (required)
        :param bool suppressed: Optionally includes suppressed findings
        :param str source: Optionally limit findings to specific sources of vulnerability intelligence
        :param str accept:
        :return: list[Finding]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'suppressed', 'source', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_findings_by_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_findings_by_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'suppressed' in params:
            query_params.append(('suppressed', params['suppressed']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/sarif+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/finding/project/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Finding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
