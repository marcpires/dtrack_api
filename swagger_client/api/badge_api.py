# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BadgeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_project_policy_violations_badge(self, uuid, **kwargs):  # noqa: E501
        """Returns a policy violations badge for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_BADGES</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_policy_violations_badge(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to retrieve a badge for (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_policy_violations_badge_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_policy_violations_badge_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_project_policy_violations_badge_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a policy violations badge for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_BADGES</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_policy_violations_badge_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to retrieve a badge for (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_policy_violations_badge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_project_policy_violations_badge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'ApiKeyQueryAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/badge/violations/project/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_policy_violations_badge1(self, name, version, **kwargs):  # noqa: E501
        """Returns a policy violations badge for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_BADGES</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_policy_violations_badge1(name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the project to query on (required)
        :param str version: The version of the project to query on (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_policy_violations_badge1_with_http_info(name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_policy_violations_badge1_with_http_info(name, version, **kwargs)  # noqa: E501
            return data

    def get_project_policy_violations_badge1_with_http_info(self, name, version, **kwargs):  # noqa: E501
        """Returns a policy violations badge for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_BADGES</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_policy_violations_badge1_with_http_info(name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the project to query on (required)
        :param str version: The version of the project to query on (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_policy_violations_badge1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_project_policy_violations_badge1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_project_policy_violations_badge1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'ApiKeyQueryAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/badge/violations/project/{name}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_vulnerabilities_badge(self, uuid, **kwargs):  # noqa: E501
        """Returns current metrics for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_BADGES</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_vulnerabilities_badge(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to retrieve metrics for (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_vulnerabilities_badge_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_vulnerabilities_badge_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_project_vulnerabilities_badge_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns current metrics for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_BADGES</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_vulnerabilities_badge_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to retrieve metrics for (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_vulnerabilities_badge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_project_vulnerabilities_badge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'ApiKeyQueryAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/badge/vulns/project/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_vulnerabilities_badge1(self, name, version, **kwargs):  # noqa: E501
        """Returns current metrics for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_BADGES</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_vulnerabilities_badge1(name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the project to query on (required)
        :param str version: The version of the project to query on (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_vulnerabilities_badge1_with_http_info(name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_vulnerabilities_badge1_with_http_info(name, version, **kwargs)  # noqa: E501
            return data

    def get_project_vulnerabilities_badge1_with_http_info(self, name, version, **kwargs):  # noqa: E501
        """Returns current metrics for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_BADGES</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_vulnerabilities_badge1_with_http_info(name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the project to query on (required)
        :param str version: The version of the project to query on (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_vulnerabilities_badge1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_project_vulnerabilities_badge1`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_project_vulnerabilities_badge1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'ApiKeyQueryAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/badge/vulns/project/{name}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
