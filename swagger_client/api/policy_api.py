# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PolicyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_project_to_policy(self, policy_uuid, project_uuid, **kwargs):  # noqa: E501
        """Adds a project to a policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_project_to_policy(policy_uuid, project_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The UUID of the policy to add a project to (required)
        :param str project_uuid: The UUID of the project to add to the rule (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_project_to_policy_with_http_info(policy_uuid, project_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_to_policy_with_http_info(policy_uuid, project_uuid, **kwargs)  # noqa: E501
            return data

    def add_project_to_policy_with_http_info(self, policy_uuid, project_uuid, **kwargs):  # noqa: E501
        """Adds a project to a policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_project_to_policy_with_http_info(policy_uuid, project_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The UUID of the policy to add a project to (required)
        :param str project_uuid: The UUID of the project to add to the rule (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_uuid', 'project_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_to_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_uuid' is set
        if ('policy_uuid' not in params or
                params['policy_uuid'] is None):
            raise ValueError("Missing the required parameter `policy_uuid` when calling `add_project_to_policy`")  # noqa: E501
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in params or
                params['project_uuid'] is None):
            raise ValueError("Missing the required parameter `project_uuid` when calling `add_project_to_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_uuid' in params:
            path_params['policyUuid'] = params['policy_uuid']  # noqa: E501
        if 'project_uuid' in params:
            path_params['projectUuid'] = params['project_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/{policyUuid}/project/{projectUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_tag_to_policy(self, policy_uuid, tag_name, **kwargs):  # noqa: E501
        """Adds a tag to a policy  # noqa: E501

        <p><strong>Deprecated</strong>. Use <code>POST /api/v1/tag/{name}/policy</code> instead.</p> <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tag_to_policy(policy_uuid, tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The UUID of the policy to add a project to (required)
        :param str tag_name: The name of the tag to add to the rule (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tag_to_policy_with_http_info(policy_uuid, tag_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tag_to_policy_with_http_info(policy_uuid, tag_name, **kwargs)  # noqa: E501
            return data

    def add_tag_to_policy_with_http_info(self, policy_uuid, tag_name, **kwargs):  # noqa: E501
        """Adds a tag to a policy  # noqa: E501

        <p><strong>Deprecated</strong>. Use <code>POST /api/v1/tag/{name}/policy</code> instead.</p> <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tag_to_policy_with_http_info(policy_uuid, tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The UUID of the policy to add a project to (required)
        :param str tag_name: The name of the tag to add to the rule (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_uuid', 'tag_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tag_to_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_uuid' is set
        if ('policy_uuid' not in params or
                params['policy_uuid'] is None):
            raise ValueError("Missing the required parameter `policy_uuid` when calling `add_tag_to_policy`")  # noqa: E501
        # verify the required parameter 'tag_name' is set
        if ('tag_name' not in params or
                params['tag_name'] is None):
            raise ValueError("Missing the required parameter `tag_name` when calling `add_tag_to_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_uuid' in params:
            path_params['policyUuid'] = params['policy_uuid']  # noqa: E501
        if 'tag_name' in params:
            path_params['tagName'] = params['tag_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/{policyUuid}/tag/{tagName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_policy(self, **kwargs):  # noqa: E501
        """Creates a new policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_policy(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Policy body:
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_policy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_policy_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_policy_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_policy_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Policy body:
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_policy(self, uuid, **kwargs):  # noqa: E501
        """Deletes a policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_policy(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the policy to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_policy_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_policy_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def delete_policy_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Deletes a policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_policy_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the policy to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policies(self, **kwargs):  # noqa: E501
        """Returns a list of all policies  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :return: list[Policy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_policies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_policies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_policies_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all policies  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :return: list[Policy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'page_size', 'offset', 'limit', 'sort_name', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_name' in params:
            query_params.append(('sortName', params['sort_name']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Policy]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy(self, uuid, **kwargs):  # noqa: E501
        """Returns a specific policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the policy to retrieve (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_policy_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_policy_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a specific policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the policy to retrieve (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_project_from_policy(self, policy_uuid, project_uuid, **kwargs):  # noqa: E501
        """Removes a project from a policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_project_from_policy(policy_uuid, project_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The UUID of the policy to remove the project from (required)
        :param str project_uuid: The UUID of the project to remove from the policy (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_project_from_policy_with_http_info(policy_uuid, project_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_project_from_policy_with_http_info(policy_uuid, project_uuid, **kwargs)  # noqa: E501
            return data

    def remove_project_from_policy_with_http_info(self, policy_uuid, project_uuid, **kwargs):  # noqa: E501
        """Removes a project from a policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_project_from_policy_with_http_info(policy_uuid, project_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The UUID of the policy to remove the project from (required)
        :param str project_uuid: The UUID of the project to remove from the policy (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_uuid', 'project_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_project_from_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_uuid' is set
        if ('policy_uuid' not in params or
                params['policy_uuid'] is None):
            raise ValueError("Missing the required parameter `policy_uuid` when calling `remove_project_from_policy`")  # noqa: E501
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in params or
                params['project_uuid'] is None):
            raise ValueError("Missing the required parameter `project_uuid` when calling `remove_project_from_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_uuid' in params:
            path_params['policyUuid'] = params['policy_uuid']  # noqa: E501
        if 'project_uuid' in params:
            path_params['projectUuid'] = params['project_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/{policyUuid}/project/{projectUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tag_from_policy(self, policy_uuid, tag_name, **kwargs):  # noqa: E501
        """Removes a tag from a policy  # noqa: E501

        <p><strong>Deprecated</strong>. Use <code>DELETE /api/v1/tag/{name}/policy</code> instead.</p> <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tag_from_policy(policy_uuid, tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The UUID of the policy to remove the tag from (required)
        :param str tag_name: The name of the tag to remove from the policy (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_tag_from_policy_with_http_info(policy_uuid, tag_name, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tag_from_policy_with_http_info(policy_uuid, tag_name, **kwargs)  # noqa: E501
            return data

    def remove_tag_from_policy_with_http_info(self, policy_uuid, tag_name, **kwargs):  # noqa: E501
        """Removes a tag from a policy  # noqa: E501

        <p><strong>Deprecated</strong>. Use <code>DELETE /api/v1/tag/{name}/policy</code> instead.</p> <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tag_from_policy_with_http_info(policy_uuid, tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The UUID of the policy to remove the tag from (required)
        :param str tag_name: The name of the tag to remove from the policy (required)
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_uuid', 'tag_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tag_from_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_uuid' is set
        if ('policy_uuid' not in params or
                params['policy_uuid'] is None):
            raise ValueError("Missing the required parameter `policy_uuid` when calling `remove_tag_from_policy`")  # noqa: E501
        # verify the required parameter 'tag_name' is set
        if ('tag_name' not in params or
                params['tag_name'] is None):
            raise ValueError("Missing the required parameter `tag_name` when calling `remove_tag_from_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_uuid' in params:
            path_params['policyUuid'] = params['policy_uuid']  # noqa: E501
        if 'tag_name' in params:
            path_params['tagName'] = params['tag_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/{policyUuid}/tag/{tagName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_policy(self, **kwargs):  # noqa: E501
        """Updates a policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Policy body:
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_policy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_policy_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_policy_with_http_info(self, **kwargs):  # noqa: E501
        """Updates a policy  # noqa: E501

        <p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Policy body:
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
