# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ComponentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_component(self, uuid, **kwargs):  # noqa: E501
        """Creates a new component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_component(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to create a component for (required)
        :param Component body:
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_component_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_component_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def create_component_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Creates a new component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_component_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to create a component for (required)
        :param Component body:
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `create_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component/project/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_component(self, uuid, **kwargs):  # noqa: E501
        """Deletes a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the component to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_component_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_component_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def delete_component_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Deletes a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the component to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_components(self, uuid, **kwargs):  # noqa: E501
        """Returns a list of all components for a given project  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_components(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to retrieve components for (required)
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :param bool only_outdated: Optionally exclude recent components so only outdated components are returned
        :param bool only_direct: Optionally exclude transitive dependencies so only direct dependencies are returned
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_components_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_components_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_all_components_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a list of all components for a given project  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_components_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to retrieve components for (required)
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :param bool only_outdated: Optionally exclude recent components so only outdated components are returned
        :param bool only_direct: Optionally exclude transitive dependencies so only direct dependencies are returned
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'page_number', 'page_size', 'offset', 'limit', 'sort_name', 'sort_order', 'only_outdated', 'only_direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_all_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_name' in params:
            query_params.append(('sortName', params['sort_name']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'only_outdated' in params:
            query_params.append(('onlyOutdated', params['only_outdated']))  # noqa: E501
        if 'only_direct' in params:
            query_params.append(('onlyDirect', params['only_direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component/project/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_by_hash(self, hash, **kwargs):  # noqa: E501
        """Returns a list of components that have the specified hash value  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_by_hash(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: The MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256, BLAKE2b-384, BLAKE2b-512, or BLAKE3 hash of the component to retrieve (required)
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_by_hash_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_by_hash_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def get_component_by_hash_with_http_info(self, hash, **kwargs):  # noqa: E501
        """Returns a list of components that have the specified hash value  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_by_hash_with_http_info(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: The MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256, BLAKE2b-384, BLAKE2b-512, or BLAKE3 hash of the component to retrieve (required)
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash', 'page_number', 'page_size', 'offset', 'limit', 'sort_name', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_by_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_component_by_hash`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_name' in params:
            query_params.append(('sortName', params['sort_name']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component/hash/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_by_identity(self, **kwargs):  # noqa: E501
        """Returns a list of components that have the specified component identity. This resource accepts coordinates (group, name, version) or purl, cpe, or swidTagId  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_by_identity(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :param str group: The group of the component
        :param str name: The name of the component
        :param str version: The version of the component
        :param str purl: The purl of the component
        :param str cpe: The cpe of the component
        :param str swid_tag_id: The swidTagId of the component
        :param str project: The project the component belongs to
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_by_identity_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_component_by_identity_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_component_by_identity_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of components that have the specified component identity. This resource accepts coordinates (group, name, version) or purl, cpe, or swidTagId  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_by_identity_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :param str group: The group of the component
        :param str name: The name of the component
        :param str version: The version of the component
        :param str purl: The purl of the component
        :param str cpe: The cpe of the component
        :param str swid_tag_id: The swidTagId of the component
        :param str project: The project the component belongs to
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'page_size', 'offset', 'limit', 'sort_name', 'sort_order', 'group', 'name', 'version', 'purl', 'cpe', 'swid_tag_id', 'project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_by_identity" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_name' in params:
            query_params.append(('sortName', params['sort_name']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'purl' in params:
            query_params.append(('purl', params['purl']))  # noqa: E501
        if 'cpe' in params:
            query_params.append(('cpe', params['cpe']))  # noqa: E501
        if 'swid_tag_id' in params:
            query_params.append(('swidTagId', params['swid_tag_id']))  # noqa: E501
        if 'project' in params:
            query_params.append(('project', params['project']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component/identity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_by_uuid(self, uuid, **kwargs):  # noqa: E501
        """Returns a specific component  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_by_uuid(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the component to retrieve (required)
        :param bool include_repository_meta_data: Optionally includes third-party metadata about the component from external repositories
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_component_by_uuid_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a specific component  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_by_uuid_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the component to retrieve (required)
        :param bool include_repository_meta_data: Optionally includes third-party metadata about the component from external repositories
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'include_repository_meta_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_component_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'include_repository_meta_data' in params:
            query_params.append(('includeRepositoryMetaData', params['include_repository_meta_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dependency_graph_for_component(self, project_uuid, component_uuids, **kwargs):  # noqa: E501
        """Returns the expanded dependency graph to every occurrence of a component  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dependency_graph_for_component(project_uuid, component_uuids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uuid: The UUID of the project to get the expanded dependency graph for (required)
        :param str component_uuids: List of UUIDs of the components (separated by |) to get the expanded dependency graph for (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dependency_graph_for_component_with_http_info(project_uuid, component_uuids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dependency_graph_for_component_with_http_info(project_uuid, component_uuids, **kwargs)  # noqa: E501
            return data

    def get_dependency_graph_for_component_with_http_info(self, project_uuid, component_uuids, **kwargs):  # noqa: E501
        """Returns the expanded dependency graph to every occurrence of a component  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dependency_graph_for_component_with_http_info(project_uuid, component_uuids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uuid: The UUID of the project to get the expanded dependency graph for (required)
        :param str component_uuids: List of UUIDs of the components (separated by |) to get the expanded dependency graph for (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_uuid', 'component_uuids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dependency_graph_for_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in params or
                params['project_uuid'] is None):
            raise ValueError("Missing the required parameter `project_uuid` when calling `get_dependency_graph_for_component`")  # noqa: E501
        # verify the required parameter 'component_uuids' is set
        if ('component_uuids' not in params or
                params['component_uuids'] is None):
            raise ValueError("Missing the required parameter `component_uuids` when calling `get_dependency_graph_for_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in params:
            path_params['projectUuid'] = params['project_uuid']  # noqa: E501
        if 'component_uuids' in params:
            path_params['componentUuids'] = params['component_uuids']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component/project/{projectUuid}/dependencyGraph/{componentUuids}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def identify_internal_components(self, **kwargs):  # noqa: E501
        """Requests the identification of internal components in the portfolio  # noqa: E501

        <p>Requires permission <strong>SYSTEM_CONFIGURATION</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identify_internal_components(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.identify_internal_components_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.identify_internal_components_with_http_info(**kwargs)  # noqa: E501
            return data

    def identify_internal_components_with_http_info(self, **kwargs):  # noqa: E501
        """Requests the identification of internal components in the portfolio  # noqa: E501

        <p>Requires permission <strong>SYSTEM_CONFIGURATION</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identify_internal_components_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method identify_internal_components" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component/internal/identify', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_component(self, **kwargs):  # noqa: E501
        """Updates a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_component(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Component body:
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_component_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_component_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_component_with_http_info(self, **kwargs):  # noqa: E501
        """Updates a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_component_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Component body:
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_component" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/component', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
