# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VulnerabilityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_vulnerability(self, uuid, component, **kwargs):  # noqa: E501
        """Assigns a vulnerability to a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_vulnerability(uuid, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the vulnerability (required)
        :param str component: The UUID of the component (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_vulnerability_with_http_info(uuid, component, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_vulnerability_with_http_info(uuid, component, **kwargs)  # noqa: E501
            return data

    def assign_vulnerability_with_http_info(self, uuid, component, **kwargs):  # noqa: E501
        """Assigns a vulnerability to a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_vulnerability_with_http_info(uuid, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the vulnerability (required)
        :param str component: The UUID of the component (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'component']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `assign_vulnerability`")  # noqa: E501
        # verify the required parameter 'component' is set
        if ('component' not in params or
                params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `assign_vulnerability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'component' in params:
            path_params['component'] = params['component']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/{uuid}/component/{component}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_vulnerability1(self, source, vuln_id, component, **kwargs):  # noqa: E501
        """Assigns a vulnerability to a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_vulnerability1(source, vuln_id, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: The vulnerability source (required)
        :param str vuln_id: The vulnId (required)
        :param str component: The UUID of the component (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_vulnerability1_with_http_info(source, vuln_id, component, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_vulnerability1_with_http_info(source, vuln_id, component, **kwargs)  # noqa: E501
            return data

    def assign_vulnerability1_with_http_info(self, source, vuln_id, component, **kwargs):  # noqa: E501
        """Assigns a vulnerability to a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_vulnerability1_with_http_info(source, vuln_id, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: The vulnerability source (required)
        :param str vuln_id: The vulnId (required)
        :param str component: The UUID of the component (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'vuln_id', 'component']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_vulnerability1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `assign_vulnerability1`")  # noqa: E501
        # verify the required parameter 'vuln_id' is set
        if ('vuln_id' not in params or
                params['vuln_id'] is None):
            raise ValueError("Missing the required parameter `vuln_id` when calling `assign_vulnerability1`")  # noqa: E501
        # verify the required parameter 'component' is set
        if ('component' not in params or
                params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `assign_vulnerability1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source' in params:
            path_params['source'] = params['source']  # noqa: E501
        if 'vuln_id' in params:
            path_params['vulnId'] = params['vuln_id']  # noqa: E501
        if 'component' in params:
            path_params['component'] = params['component']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/source/{source}/vuln/{vulnId}/component/{component}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vulnerability(self, **kwargs):  # noqa: E501
        """Creates a new vulnerability  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vulnerability(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Vulnerability body:
        :return: Vulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_vulnerability_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_vulnerability_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_vulnerability_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new vulnerability  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vulnerability_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Vulnerability body:
        :return: Vulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vulnerability',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vulnerability(self, uuid, **kwargs):  # noqa: E501
        """Deletes a vulnerability  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vulnerability(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the vulnerability to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vulnerability_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vulnerability_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def delete_vulnerability_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Deletes a vulnerability  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vulnerability_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the vulnerability to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_vulnerability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_internal_vulnerability_identifier(self, **kwargs):  # noqa: E501
        """Generates an internal vulnerability identifier  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_internal_vulnerability_identifier(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_internal_vulnerability_identifier_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_internal_vulnerability_identifier_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_internal_vulnerability_identifier_with_http_info(self, **kwargs):  # noqa: E501
        """Generates an internal vulnerability identifier  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_internal_vulnerability_identifier_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_internal_vulnerability_identifier" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/vulnId', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_affected_project(self, source, vuln, **kwargs):  # noqa: E501
        """Returns a list of all projects affected by a specific vulnerability  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_affected_project(source, vuln, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param str vuln: (required)
        :param bool exclude_inactive: Optionally excludes inactive projects from being returned
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_affected_project_with_http_info(source, vuln, **kwargs)  # noqa: E501
        else:
            (data) = self.get_affected_project_with_http_info(source, vuln, **kwargs)  # noqa: E501
            return data

    def get_affected_project_with_http_info(self, source, vuln, **kwargs):  # noqa: E501
        """Returns a list of all projects affected by a specific vulnerability  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_affected_project_with_http_info(source, vuln, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param str vuln: (required)
        :param bool exclude_inactive: Optionally excludes inactive projects from being returned
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'vuln', 'exclude_inactive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_affected_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `get_affected_project`")  # noqa: E501
        # verify the required parameter 'vuln' is set
        if ('vuln' not in params or
                params['vuln'] is None):
            raise ValueError("Missing the required parameter `vuln` when calling `get_affected_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source' in params:
            path_params['source'] = params['source']  # noqa: E501
        if 'vuln' in params:
            path_params['vuln'] = params['vuln']  # noqa: E501

        query_params = []
        if 'exclude_inactive' in params:
            query_params.append(('excludeInactive', params['exclude_inactive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/source/{source}/vuln/{vuln}/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Project]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vulnerabilities(self, **kwargs):  # noqa: E501
        """Returns a list of all vulnerabilities  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vulnerabilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :return: list[Vulnerability]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vulnerabilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vulnerabilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_vulnerabilities_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all vulnerabilities  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vulnerabilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :return: list[Vulnerability]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'page_size', 'offset', 'limit', 'sort_name', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vulnerabilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_name' in params:
            query_params.append(('sortName', params['sort_name']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Vulnerability]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerabilities_by_component(self, uuid, **kwargs):  # noqa: E501
        """Returns a list of all vulnerabilities for a specific component  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerabilities_by_component(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the component to retrieve vulnerabilities for (required)
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :param bool suppressed: Optionally includes suppressed vulnerabilities
        :return: list[Vulnerability]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerabilities_by_component_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerabilities_by_component_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_vulnerabilities_by_component_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a list of all vulnerabilities for a specific component  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerabilities_by_component_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the component to retrieve vulnerabilities for (required)
        :param str page_number: The page to return. To be used in conjunction with <code>pageSize</code>.
        :param str page_size: Number of elements to return per page. To be used in conjunction with <code>pageNumber</code>.
        :param str offset: Offset to start returning elements from. To be used in conjunction with <code>limit</code>.
        :param str limit: Number of elements to return per page. To be used in conjunction with <code>offset</code>.
        :param str sort_name: Name of the resource field to sort on.
        :param str sort_order: Ordering of items when sorting with <code>sortName</code>.
        :param bool suppressed: Optionally includes suppressed vulnerabilities
        :return: list[Vulnerability]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'page_number', 'page_size', 'offset', 'limit', 'sort_name', 'sort_order', 'suppressed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerabilities_by_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_vulnerabilities_by_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_name' in params:
            query_params.append(('sortName', params['sort_name']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'suppressed' in params:
            query_params.append(('suppressed', params['suppressed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/component/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Vulnerability]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerabilities_by_project(self, uuid, **kwargs):  # noqa: E501
        """Returns a list of all vulnerabilities for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerabilities_by_project(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to retrieve vulnerabilities for (required)
        :param bool suppressed: Optionally includes suppressed vulnerabilities
        :return: list[Vulnerability]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerabilities_by_project_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerabilities_by_project_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_vulnerabilities_by_project_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a list of all vulnerabilities for a specific project  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerabilities_by_project_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the project to retrieve vulnerabilities for (required)
        :param bool suppressed: Optionally includes suppressed vulnerabilities
        :return: list[Vulnerability]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'suppressed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerabilities_by_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_vulnerabilities_by_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'suppressed' in params:
            query_params.append(('suppressed', params['suppressed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/project/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Vulnerability]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerability_by_uuid(self, uuid, **kwargs):  # noqa: E501
        """Returns a specific vulnerability  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_by_uuid(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the vulnerability (required)
        :return: Vulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerability_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerability_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_vulnerability_by_uuid_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Returns a specific vulnerability  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_by_uuid_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the vulnerability (required)
        :return: Vulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerability_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_vulnerability_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vulnerability',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerability_by_vuln_id(self, source, vuln, **kwargs):  # noqa: E501
        """Returns a specific vulnerability  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_by_vuln_id(source, vuln, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param str vuln: (required)
        :return: Vulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerability_by_vuln_id_with_http_info(source, vuln, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerability_by_vuln_id_with_http_info(source, vuln, **kwargs)  # noqa: E501
            return data

    def get_vulnerability_by_vuln_id_with_http_info(self, source, vuln, **kwargs):  # noqa: E501
        """Returns a specific vulnerability  # noqa: E501

        <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_by_vuln_id_with_http_info(source, vuln, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param str vuln: (required)
        :return: Vulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'vuln']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerability_by_vuln_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `get_vulnerability_by_vuln_id`")  # noqa: E501
        # verify the required parameter 'vuln' is set
        if ('vuln' not in params or
                params['vuln'] is None):
            raise ValueError("Missing the required parameter `vuln` when calling `get_vulnerability_by_vuln_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source' in params:
            path_params['source'] = params['source']  # noqa: E501
        if 'vuln' in params:
            path_params['vuln'] = params['vuln']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/source/{source}/vuln/{vuln}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vulnerability',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_vulnerability(self, uuid, component, **kwargs):  # noqa: E501
        """Removes assignment of a vulnerability from a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_vulnerability(uuid, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the vulnerability (required)
        :param str component: The UUID of the component (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_vulnerability_with_http_info(uuid, component, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_vulnerability_with_http_info(uuid, component, **kwargs)  # noqa: E501
            return data

    def unassign_vulnerability_with_http_info(self, uuid, component, **kwargs):  # noqa: E501
        """Removes assignment of a vulnerability from a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_vulnerability_with_http_info(uuid, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the vulnerability (required)
        :param str component: The UUID of the component (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'component']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `unassign_vulnerability`")  # noqa: E501
        # verify the required parameter 'component' is set
        if ('component' not in params or
                params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `unassign_vulnerability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'component' in params:
            path_params['component'] = params['component']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/{uuid}/component/{component}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_vulnerability1(self, source, vuln_id, component, **kwargs):  # noqa: E501
        """Removes assignment of a vulnerability from a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_vulnerability1(source, vuln_id, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: The vulnerability source (required)
        :param str vuln_id: The vulnId (required)
        :param str component: The UUID of the component (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_vulnerability1_with_http_info(source, vuln_id, component, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_vulnerability1_with_http_info(source, vuln_id, component, **kwargs)  # noqa: E501
            return data

    def unassign_vulnerability1_with_http_info(self, source, vuln_id, component, **kwargs):  # noqa: E501
        """Removes assignment of a vulnerability from a component  # noqa: E501

        <p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_vulnerability1_with_http_info(source, vuln_id, component, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: The vulnerability source (required)
        :param str vuln_id: The vulnId (required)
        :param str component: The UUID of the component (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'vuln_id', 'component']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_vulnerability1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `unassign_vulnerability1`")  # noqa: E501
        # verify the required parameter 'vuln_id' is set
        if ('vuln_id' not in params or
                params['vuln_id'] is None):
            raise ValueError("Missing the required parameter `vuln_id` when calling `unassign_vulnerability1`")  # noqa: E501
        # verify the required parameter 'component' is set
        if ('component' not in params or
                params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `unassign_vulnerability1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source' in params:
            path_params['source'] = params['source']  # noqa: E501
        if 'vuln_id' in params:
            path_params['vulnId'] = params['vuln_id']  # noqa: E501
        if 'component' in params:
            path_params['component'] = params['component']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability/source/{source}/vuln/{vulnId}/component/{component}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vulnerability(self, **kwargs):  # noqa: E501
        """Updates an internal vulnerability  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vulnerability(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Vulnerability body:
        :return: Vulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vulnerability_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_vulnerability_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_vulnerability_with_http_info(self, **kwargs):  # noqa: E501
        """Updates an internal vulnerability  # noqa: E501

        <p>Requires permission <strong>VULNERABILITY_MANAGEMENT</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vulnerability_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Vulnerability body:
        :return: Vulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/vulnerability', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vulnerability',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
