# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ViolationanalysisApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def retrieve_analysis1(self, component, policy_violation, **kwargs):  # noqa: E501
        """Retrieves a violation analysis trail  # noqa: E501

        <p>Requires permission <strong>VIEW_POLICY_VIOLATION</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_analysis1(component, policy_violation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component: The UUID of the component (required)
        :param str policy_violation: The UUID of the policy violation (required)
        :return: ViolationAnalysis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_analysis1_with_http_info(component, policy_violation, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_analysis1_with_http_info(component, policy_violation, **kwargs)  # noqa: E501
            return data

    def retrieve_analysis1_with_http_info(self, component, policy_violation, **kwargs):  # noqa: E501
        """Retrieves a violation analysis trail  # noqa: E501

        <p>Requires permission <strong>VIEW_POLICY_VIOLATION</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_analysis1_with_http_info(component, policy_violation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component: The UUID of the component (required)
        :param str policy_violation: The UUID of the policy violation (required)
        :return: ViolationAnalysis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component', 'policy_violation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_analysis1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component' is set
        if ('component' not in params or
                params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `retrieve_analysis1`")  # noqa: E501
        # verify the required parameter 'policy_violation' is set
        if ('policy_violation' not in params or
                params['policy_violation'] is None):
            raise ValueError("Missing the required parameter `policy_violation` when calling `retrieve_analysis1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component' in params:
            query_params.append(('component', params['component']))  # noqa: E501
        if 'policy_violation' in params:
            query_params.append(('policyViolation', params['policy_violation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/violation/analysis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViolationAnalysis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_analysis1(self, **kwargs):  # noqa: E501
        """Records a violation analysis decision  # noqa: E501

        <p>Requires permission <strong>POLICY_VIOLATION_ANALYSIS</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analysis1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ViolationAnalysisRequest body:
        :return: ViolationAnalysis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_analysis1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_analysis1_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_analysis1_with_http_info(self, **kwargs):  # noqa: E501
        """Records a violation analysis decision  # noqa: E501

        <p>Requires permission <strong>POLICY_VIOLATION_ANALYSIS</strong></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analysis1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ViolationAnalysisRequest body:
        :return: ViolationAnalysis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_analysis1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/violation/analysis', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViolationAnalysis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
