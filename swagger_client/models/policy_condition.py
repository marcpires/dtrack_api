# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policy': 'Policy',
        'operator': 'str',
        'subject': 'str',
        'value': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'policy': 'policy',
        'operator': 'operator',
        'subject': 'subject',
        'value': 'value',
        'uuid': 'uuid'
    }

    def __init__(self, policy=None, operator=None, subject=None, value=None, uuid=None):  # noqa: E501
        """PolicyCondition - a model defined in Swagger"""  # noqa: E501
        self._policy = None
        self._operator = None
        self._subject = None
        self._value = None
        self._uuid = None
        self.discriminator = None
        if policy is not None:
            self.policy = policy
        if operator is not None:
            self.operator = operator
        if subject is not None:
            self.subject = subject
        if value is not None:
            self.value = value
        self.uuid = uuid

    @property
    def policy(self):
        """Gets the policy of this PolicyCondition.  # noqa: E501


        :return: The policy of this PolicyCondition.  # noqa: E501
        :rtype: Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PolicyCondition.


        :param policy: The policy of this PolicyCondition.  # noqa: E501
        :type: Policy
        """

        self._policy = policy

    @property
    def operator(self):
        """Gets the operator of this PolicyCondition.  # noqa: E501


        :return: The operator of this PolicyCondition.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PolicyCondition.


        :param operator: The operator of this PolicyCondition.  # noqa: E501
        :type: str
        """
        allowed_values = ["IS", "IS_NOT", "MATCHES", "NO_MATCH", "NUMERIC_GREATER_THAN", "NUMERIC_LESS_THAN", "NUMERIC_EQUAL", "NUMERIC_NOT_EQUAL", "NUMERIC_GREATER_THAN_OR_EQUAL", "NUMERIC_LESSER_THAN_OR_EQUAL", "CONTAINS_ALL", "CONTAINS_ANY"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def subject(self):
        """Gets the subject of this PolicyCondition.  # noqa: E501


        :return: The subject of this PolicyCondition.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PolicyCondition.


        :param subject: The subject of this PolicyCondition.  # noqa: E501
        :type: str
        """
        allowed_values = ["AGE", "COORDINATES", "CPE", "LICENSE", "LICENSE_GROUP", "PACKAGE_URL", "SEVERITY", "SWID_TAGID", "VERSION", "COMPONENT_HASH", "CWE", "VULNERABILITY_ID", "VERSION_DISTANCE", "EPSS"]  # noqa: E501
        if subject not in allowed_values:
            raise ValueError(
                "Invalid value for `subject` ({0}), must be one of {1}"  # noqa: E501
                .format(subject, allowed_values)
            )

        self._subject = subject

    @property
    def value(self):
        """Gets the value of this PolicyCondition.  # noqa: E501


        :return: The value of this PolicyCondition.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PolicyCondition.


        :param value: The value of this PolicyCondition.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def uuid(self):
        """Gets the uuid of this PolicyCondition.  # noqa: E501


        :return: The uuid of this PolicyCondition.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PolicyCondition.


        :param uuid: The uuid of this PolicyCondition.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
