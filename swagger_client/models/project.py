# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authors': 'list[OrganizationalContact]',
        'publisher': 'str',
        'manufacturer': 'OrganizationalEntity',
        'supplier': 'OrganizationalEntity',
        'group': 'str',
        'name': 'str',
        'description': 'str',
        'version': 'str',
        'classifier': 'str',
        'collection_logic': 'str',
        'collection_tag': 'Tag',
        'cpe': 'str',
        'purl': 'str',
        'swid_tag_id': 'str',
        'direct_dependencies': 'str',
        'uuid': 'str',
        'parent': 'Project',
        'children': 'list[Project]',
        'properties': 'list[ProjectProperty]',
        'tags': 'list[Tag]',
        'last_bom_import': 'int',
        'last_bom_import_format': 'str',
        'last_inherited_risk_score': 'float',
        'last_vulnerability_analysis': 'int',
        'active': 'bool',
        'is_latest': 'bool',
        'access_teams': 'list[Team]',
        'external_references': 'list[ExternalReference]',
        'metadata': 'ProjectMetadata',
        'versions': 'list[ProjectVersion]',
        'author': 'str',
        'metrics': 'ProjectMetrics',
        'bom_ref': 'str'
    }

    attribute_map = {
        'authors': 'authors',
        'publisher': 'publisher',
        'manufacturer': 'manufacturer',
        'supplier': 'supplier',
        'group': 'group',
        'name': 'name',
        'description': 'description',
        'version': 'version',
        'classifier': 'classifier',
        'collection_logic': 'collectionLogic',
        'collection_tag': 'collectionTag',
        'cpe': 'cpe',
        'purl': 'purl',
        'swid_tag_id': 'swidTagId',
        'direct_dependencies': 'directDependencies',
        'uuid': 'uuid',
        'parent': 'parent',
        'children': 'children',
        'properties': 'properties',
        'tags': 'tags',
        'last_bom_import': 'lastBomImport',
        'last_bom_import_format': 'lastBomImportFormat',
        'last_inherited_risk_score': 'lastInheritedRiskScore',
        'last_vulnerability_analysis': 'lastVulnerabilityAnalysis',
        'active': 'active',
        'is_latest': 'isLatest',
        'access_teams': 'accessTeams',
        'external_references': 'externalReferences',
        'metadata': 'metadata',
        'versions': 'versions',
        'author': 'author',
        'metrics': 'metrics',
        'bom_ref': 'bomRef'
    }

    def __init__(self, authors=None, publisher=None, manufacturer=None, supplier=None, group=None, name=None, description=None, version=None, classifier=None, collection_logic=None, collection_tag=None, cpe=None, purl=None, swid_tag_id=None, direct_dependencies=None, uuid=None, parent=None, children=None, properties=None, tags=None, last_bom_import=None, last_bom_import_format=None, last_inherited_risk_score=None, last_vulnerability_analysis=None, active=None, is_latest=None, access_teams=None, external_references=None, metadata=None, versions=None, author=None, metrics=None, bom_ref=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        self._authors = None
        self._publisher = None
        self._manufacturer = None
        self._supplier = None
        self._group = None
        self._name = None
        self._description = None
        self._version = None
        self._classifier = None
        self._collection_logic = None
        self._collection_tag = None
        self._cpe = None
        self._purl = None
        self._swid_tag_id = None
        self._direct_dependencies = None
        self._uuid = None
        self._parent = None
        self._children = None
        self._properties = None
        self._tags = None
        self._last_bom_import = None
        self._last_bom_import_format = None
        self._last_inherited_risk_score = None
        self._last_vulnerability_analysis = None
        self._active = None
        self._is_latest = None
        self._access_teams = None
        self._external_references = None
        self._metadata = None
        self._versions = None
        self._author = None
        self._metrics = None
        self._bom_ref = None
        self.discriminator = None
        if authors is not None:
            self.authors = authors
        if publisher is not None:
            self.publisher = publisher
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if supplier is not None:
            self.supplier = supplier
        if group is not None:
            self.group = group
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if classifier is not None:
            self.classifier = classifier
        if collection_logic is not None:
            self.collection_logic = collection_logic
        if collection_tag is not None:
            self.collection_tag = collection_tag
        if cpe is not None:
            self.cpe = cpe
        if purl is not None:
            self.purl = purl
        if swid_tag_id is not None:
            self.swid_tag_id = swid_tag_id
        if direct_dependencies is not None:
            self.direct_dependencies = direct_dependencies
        self.uuid = uuid
        if parent is not None:
            self.parent = parent
        if children is not None:
            self.children = children
        if properties is not None:
            self.properties = properties
        if tags is not None:
            self.tags = tags
        self.last_bom_import = last_bom_import
        if last_bom_import_format is not None:
            self.last_bom_import_format = last_bom_import_format
        if last_inherited_risk_score is not None:
            self.last_inherited_risk_score = last_inherited_risk_score
        if last_vulnerability_analysis is not None:
            self.last_vulnerability_analysis = last_vulnerability_analysis
        if active is not None:
            self.active = active
        if is_latest is not None:
            self.is_latest = is_latest
        if access_teams is not None:
            self.access_teams = access_teams
        if external_references is not None:
            self.external_references = external_references
        if metadata is not None:
            self.metadata = metadata
        if versions is not None:
            self.versions = versions
        if author is not None:
            self.author = author
        if metrics is not None:
            self.metrics = metrics
        if bom_ref is not None:
            self.bom_ref = bom_ref

    @property
    def authors(self):
        """Gets the authors of this Project.  # noqa: E501


        :return: The authors of this Project.  # noqa: E501
        :rtype: list[OrganizationalContact]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Project.


        :param authors: The authors of this Project.  # noqa: E501
        :type: list[OrganizationalContact]
        """

        self._authors = authors

    @property
    def publisher(self):
        """Gets the publisher of this Project.  # noqa: E501


        :return: The publisher of this Project.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Project.


        :param publisher: The publisher of this Project.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Project.  # noqa: E501


        :return: The manufacturer of this Project.  # noqa: E501
        :rtype: OrganizationalEntity
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Project.


        :param manufacturer: The manufacturer of this Project.  # noqa: E501
        :type: OrganizationalEntity
        """

        self._manufacturer = manufacturer

    @property
    def supplier(self):
        """Gets the supplier of this Project.  # noqa: E501


        :return: The supplier of this Project.  # noqa: E501
        :rtype: OrganizationalEntity
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this Project.


        :param supplier: The supplier of this Project.  # noqa: E501
        :type: OrganizationalEntity
        """

        self._supplier = supplier

    @property
    def group(self):
        """Gets the group of this Project.  # noqa: E501


        :return: The group of this Project.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Project.


        :param group: The group of this Project.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this Project.  # noqa: E501


        :return: The version of this Project.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Project.


        :param version: The version of this Project.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def classifier(self):
        """Gets the classifier of this Project.  # noqa: E501


        :return: The classifier of this Project.  # noqa: E501
        :rtype: str
        """
        return self._classifier

    @classifier.setter
    def classifier(self, classifier):
        """Sets the classifier of this Project.


        :param classifier: The classifier of this Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "APPLICATION", "FRAMEWORK", "LIBRARY", "CONTAINER", "OPERATING_SYSTEM", "DEVICE", "FIRMWARE", "FILE", "PLATFORM", "DEVICE_DRIVER", "MACHINE_LEARNING_MODEL", "DATA"]  # noqa: E501
        if classifier not in allowed_values:
            raise ValueError(
                "Invalid value for `classifier` ({0}), must be one of {1}"  # noqa: E501
                .format(classifier, allowed_values)
            )

        self._classifier = classifier

    @property
    def collection_logic(self):
        """Gets the collection_logic of this Project.  # noqa: E501


        :return: The collection_logic of this Project.  # noqa: E501
        :rtype: str
        """
        return self._collection_logic

    @collection_logic.setter
    def collection_logic(self, collection_logic):
        """Sets the collection_logic of this Project.


        :param collection_logic: The collection_logic of this Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "AGGREGATE_DIRECT_CHILDREN", "AGGREGATE_DIRECT_CHILDREN_WITH_TAG", "AGGREGATE_LATEST_VERSION_CHILDREN"]  # noqa: E501
        if collection_logic not in allowed_values:
            raise ValueError(
                "Invalid value for `collection_logic` ({0}), must be one of {1}"  # noqa: E501
                .format(collection_logic, allowed_values)
            )

        self._collection_logic = collection_logic

    @property
    def collection_tag(self):
        """Gets the collection_tag of this Project.  # noqa: E501


        :return: The collection_tag of this Project.  # noqa: E501
        :rtype: Tag
        """
        return self._collection_tag

    @collection_tag.setter
    def collection_tag(self, collection_tag):
        """Sets the collection_tag of this Project.


        :param collection_tag: The collection_tag of this Project.  # noqa: E501
        :type: Tag
        """

        self._collection_tag = collection_tag

    @property
    def cpe(self):
        """Gets the cpe of this Project.  # noqa: E501


        :return: The cpe of this Project.  # noqa: E501
        :rtype: str
        """
        return self._cpe

    @cpe.setter
    def cpe(self, cpe):
        """Sets the cpe of this Project.


        :param cpe: The cpe of this Project.  # noqa: E501
        :type: str
        """

        self._cpe = cpe

    @property
    def purl(self):
        """Gets the purl of this Project.  # noqa: E501


        :return: The purl of this Project.  # noqa: E501
        :rtype: str
        """
        return self._purl

    @purl.setter
    def purl(self, purl):
        """Sets the purl of this Project.


        :param purl: The purl of this Project.  # noqa: E501
        :type: str
        """

        self._purl = purl

    @property
    def swid_tag_id(self):
        """Gets the swid_tag_id of this Project.  # noqa: E501


        :return: The swid_tag_id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._swid_tag_id

    @swid_tag_id.setter
    def swid_tag_id(self, swid_tag_id):
        """Sets the swid_tag_id of this Project.


        :param swid_tag_id: The swid_tag_id of this Project.  # noqa: E501
        :type: str
        """

        self._swid_tag_id = swid_tag_id

    @property
    def direct_dependencies(self):
        """Gets the direct_dependencies of this Project.  # noqa: E501


        :return: The direct_dependencies of this Project.  # noqa: E501
        :rtype: str
        """
        return self._direct_dependencies

    @direct_dependencies.setter
    def direct_dependencies(self, direct_dependencies):
        """Sets the direct_dependencies of this Project.


        :param direct_dependencies: The direct_dependencies of this Project.  # noqa: E501
        :type: str
        """

        self._direct_dependencies = direct_dependencies

    @property
    def uuid(self):
        """Gets the uuid of this Project.  # noqa: E501


        :return: The uuid of this Project.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Project.


        :param uuid: The uuid of this Project.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def parent(self):
        """Gets the parent of this Project.  # noqa: E501


        :return: The parent of this Project.  # noqa: E501
        :rtype: Project
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Project.


        :param parent: The parent of this Project.  # noqa: E501
        :type: Project
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this Project.  # noqa: E501


        :return: The children of this Project.  # noqa: E501
        :rtype: list[Project]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Project.


        :param children: The children of this Project.  # noqa: E501
        :type: list[Project]
        """

        self._children = children

    @property
    def properties(self):
        """Gets the properties of this Project.  # noqa: E501


        :return: The properties of this Project.  # noqa: E501
        :rtype: list[ProjectProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Project.


        :param properties: The properties of this Project.  # noqa: E501
        :type: list[ProjectProperty]
        """

        self._properties = properties

    @property
    def tags(self):
        """Gets the tags of this Project.  # noqa: E501


        :return: The tags of this Project.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Project.


        :param tags: The tags of this Project.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def last_bom_import(self):
        """Gets the last_bom_import of this Project.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The last_bom_import of this Project.  # noqa: E501
        :rtype: int
        """
        return self._last_bom_import

    @last_bom_import.setter
    def last_bom_import(self, last_bom_import):
        """Sets the last_bom_import of this Project.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param last_bom_import: The last_bom_import of this Project.  # noqa: E501
        :type: int
        """
        if last_bom_import is None:
            raise ValueError("Invalid value for `last_bom_import`, must not be `None`")  # noqa: E501

        self._last_bom_import = last_bom_import

    @property
    def last_bom_import_format(self):
        """Gets the last_bom_import_format of this Project.  # noqa: E501


        :return: The last_bom_import_format of this Project.  # noqa: E501
        :rtype: str
        """
        return self._last_bom_import_format

    @last_bom_import_format.setter
    def last_bom_import_format(self, last_bom_import_format):
        """Sets the last_bom_import_format of this Project.


        :param last_bom_import_format: The last_bom_import_format of this Project.  # noqa: E501
        :type: str
        """

        self._last_bom_import_format = last_bom_import_format

    @property
    def last_inherited_risk_score(self):
        """Gets the last_inherited_risk_score of this Project.  # noqa: E501


        :return: The last_inherited_risk_score of this Project.  # noqa: E501
        :rtype: float
        """
        return self._last_inherited_risk_score

    @last_inherited_risk_score.setter
    def last_inherited_risk_score(self, last_inherited_risk_score):
        """Sets the last_inherited_risk_score of this Project.


        :param last_inherited_risk_score: The last_inherited_risk_score of this Project.  # noqa: E501
        :type: float
        """

        self._last_inherited_risk_score = last_inherited_risk_score

    @property
    def last_vulnerability_analysis(self):
        """Gets the last_vulnerability_analysis of this Project.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The last_vulnerability_analysis of this Project.  # noqa: E501
        :rtype: int
        """
        return self._last_vulnerability_analysis

    @last_vulnerability_analysis.setter
    def last_vulnerability_analysis(self, last_vulnerability_analysis):
        """Sets the last_vulnerability_analysis of this Project.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param last_vulnerability_analysis: The last_vulnerability_analysis of this Project.  # noqa: E501
        :type: int
        """

        self._last_vulnerability_analysis = last_vulnerability_analysis

    @property
    def active(self):
        """Gets the active of this Project.  # noqa: E501


        :return: The active of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Project.


        :param active: The active of this Project.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def is_latest(self):
        """Gets the is_latest of this Project.  # noqa: E501


        :return: The is_latest of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this Project.


        :param is_latest: The is_latest of this Project.  # noqa: E501
        :type: bool
        """

        self._is_latest = is_latest

    @property
    def access_teams(self):
        """Gets the access_teams of this Project.  # noqa: E501


        :return: The access_teams of this Project.  # noqa: E501
        :rtype: list[Team]
        """
        return self._access_teams

    @access_teams.setter
    def access_teams(self, access_teams):
        """Sets the access_teams of this Project.


        :param access_teams: The access_teams of this Project.  # noqa: E501
        :type: list[Team]
        """

        self._access_teams = access_teams

    @property
    def external_references(self):
        """Gets the external_references of this Project.  # noqa: E501


        :return: The external_references of this Project.  # noqa: E501
        :rtype: list[ExternalReference]
        """
        return self._external_references

    @external_references.setter
    def external_references(self, external_references):
        """Sets the external_references of this Project.


        :param external_references: The external_references of this Project.  # noqa: E501
        :type: list[ExternalReference]
        """

        self._external_references = external_references

    @property
    def metadata(self):
        """Gets the metadata of this Project.  # noqa: E501


        :return: The metadata of this Project.  # noqa: E501
        :rtype: ProjectMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Project.


        :param metadata: The metadata of this Project.  # noqa: E501
        :type: ProjectMetadata
        """

        self._metadata = metadata

    @property
    def versions(self):
        """Gets the versions of this Project.  # noqa: E501


        :return: The versions of this Project.  # noqa: E501
        :rtype: list[ProjectVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this Project.


        :param versions: The versions of this Project.  # noqa: E501
        :type: list[ProjectVersion]
        """

        self._versions = versions

    @property
    def author(self):
        """Gets the author of this Project.  # noqa: E501


        :return: The author of this Project.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Project.


        :param author: The author of this Project.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def metrics(self):
        """Gets the metrics of this Project.  # noqa: E501


        :return: The metrics of this Project.  # noqa: E501
        :rtype: ProjectMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Project.


        :param metrics: The metrics of this Project.  # noqa: E501
        :type: ProjectMetrics
        """

        self._metrics = metrics

    @property
    def bom_ref(self):
        """Gets the bom_ref of this Project.  # noqa: E501


        :return: The bom_ref of this Project.  # noqa: E501
        :rtype: str
        """
        return self._bom_ref

    @bom_ref.setter
    def bom_ref(self, bom_ref):
        """Sets the bom_ref of this Project.


        :param bom_ref: The bom_ref of this Project.  # noqa: E501
        :type: str
        """

        self._bom_ref = bom_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
