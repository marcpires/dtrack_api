# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class About(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'timestamp': 'str',
        'system_uuid': 'str',
        'uuid': 'str',
        'application': 'str',
        'framework': 'Framework'
    }

    attribute_map = {
        'version': 'version',
        'timestamp': 'timestamp',
        'system_uuid': 'systemUuid',
        'uuid': 'uuid',
        'application': 'application',
        'framework': 'framework'
    }

    def __init__(self, version=None, timestamp=None, system_uuid=None, uuid=None, application=None, framework=None):  # noqa: E501
        """About - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._timestamp = None
        self._system_uuid = None
        self._uuid = None
        self._application = None
        self._framework = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if timestamp is not None:
            self.timestamp = timestamp
        if system_uuid is not None:
            self.system_uuid = system_uuid
        if uuid is not None:
            self.uuid = uuid
        if application is not None:
            self.application = application
        if framework is not None:
            self.framework = framework

    @property
    def version(self):
        """Gets the version of this About.  # noqa: E501


        :return: The version of this About.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this About.


        :param version: The version of this About.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def timestamp(self):
        """Gets the timestamp of this About.  # noqa: E501


        :return: The timestamp of this About.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this About.


        :param timestamp: The timestamp of this About.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def system_uuid(self):
        """Gets the system_uuid of this About.  # noqa: E501


        :return: The system_uuid of this About.  # noqa: E501
        :rtype: str
        """
        return self._system_uuid

    @system_uuid.setter
    def system_uuid(self, system_uuid):
        """Sets the system_uuid of this About.


        :param system_uuid: The system_uuid of this About.  # noqa: E501
        :type: str
        """

        self._system_uuid = system_uuid

    @property
    def uuid(self):
        """Gets the uuid of this About.  # noqa: E501


        :return: The uuid of this About.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this About.


        :param uuid: The uuid of this About.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def application(self):
        """Gets the application of this About.  # noqa: E501


        :return: The application of this About.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this About.


        :param application: The application of this About.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def framework(self):
        """Gets the framework of this About.  # noqa: E501


        :return: The framework of this About.  # noqa: E501
        :rtype: Framework
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this About.


        :param framework: The framework of this About.  # noqa: E501
        :type: Framework
        """

        self._framework = framework

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(About, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, About):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
