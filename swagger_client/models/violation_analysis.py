# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ViolationAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysis_state': 'str',
        'analysis_comments': 'list[ViolationAnalysisComment]',
        'violation_analysis_state': 'str',
        'is_suppressed': 'bool'
    }

    attribute_map = {
        'analysis_state': 'analysisState',
        'analysis_comments': 'analysisComments',
        'violation_analysis_state': 'violationAnalysisState',
        'is_suppressed': 'isSuppressed'
    }

    def __init__(self, analysis_state=None, analysis_comments=None, violation_analysis_state=None, is_suppressed=None):  # noqa: E501
        """ViolationAnalysis - a model defined in Swagger"""  # noqa: E501
        self._analysis_state = None
        self._analysis_comments = None
        self._violation_analysis_state = None
        self._is_suppressed = None
        self.discriminator = None
        self.analysis_state = analysis_state
        if analysis_comments is not None:
            self.analysis_comments = analysis_comments
        if violation_analysis_state is not None:
            self.violation_analysis_state = violation_analysis_state
        if is_suppressed is not None:
            self.is_suppressed = is_suppressed

    @property
    def analysis_state(self):
        """Gets the analysis_state of this ViolationAnalysis.  # noqa: E501


        :return: The analysis_state of this ViolationAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._analysis_state

    @analysis_state.setter
    def analysis_state(self, analysis_state):
        """Sets the analysis_state of this ViolationAnalysis.


        :param analysis_state: The analysis_state of this ViolationAnalysis.  # noqa: E501
        :type: str
        """
        if analysis_state is None:
            raise ValueError("Invalid value for `analysis_state`, must not be `None`")  # noqa: E501
        allowed_values = ["APPROVED", "REJECTED", "NOT_SET"]  # noqa: E501
        if analysis_state not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_state` ({0}), must be one of {1}"  # noqa: E501
                .format(analysis_state, allowed_values)
            )

        self._analysis_state = analysis_state

    @property
    def analysis_comments(self):
        """Gets the analysis_comments of this ViolationAnalysis.  # noqa: E501


        :return: The analysis_comments of this ViolationAnalysis.  # noqa: E501
        :rtype: list[ViolationAnalysisComment]
        """
        return self._analysis_comments

    @analysis_comments.setter
    def analysis_comments(self, analysis_comments):
        """Sets the analysis_comments of this ViolationAnalysis.


        :param analysis_comments: The analysis_comments of this ViolationAnalysis.  # noqa: E501
        :type: list[ViolationAnalysisComment]
        """

        self._analysis_comments = analysis_comments

    @property
    def violation_analysis_state(self):
        """Gets the violation_analysis_state of this ViolationAnalysis.  # noqa: E501


        :return: The violation_analysis_state of this ViolationAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._violation_analysis_state

    @violation_analysis_state.setter
    def violation_analysis_state(self, violation_analysis_state):
        """Sets the violation_analysis_state of this ViolationAnalysis.


        :param violation_analysis_state: The violation_analysis_state of this ViolationAnalysis.  # noqa: E501
        :type: str
        """
        allowed_values = ["APPROVED", "REJECTED", "NOT_SET"]  # noqa: E501
        if violation_analysis_state not in allowed_values:
            raise ValueError(
                "Invalid value for `violation_analysis_state` ({0}), must be one of {1}"  # noqa: E501
                .format(violation_analysis_state, allowed_values)
            )

        self._violation_analysis_state = violation_analysis_state

    @property
    def is_suppressed(self):
        """Gets the is_suppressed of this ViolationAnalysis.  # noqa: E501


        :return: The is_suppressed of this ViolationAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._is_suppressed

    @is_suppressed.setter
    def is_suppressed(self, is_suppressed):
        """Sets the is_suppressed of this ViolationAnalysis.


        :param is_suppressed: The is_suppressed of this ViolationAnalysis.  # noqa: E501
        :type: bool
        """

        self._is_suppressed = is_suppressed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ViolationAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViolationAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
