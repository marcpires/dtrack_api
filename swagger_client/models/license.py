# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class License(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_groups': 'list[LicenseGroup]',
        'uuid': 'str',
        'name': 'str',
        'license_text': 'str',
        'standard_license_template': 'str',
        'standard_license_header': 'str',
        'license_comments': 'str',
        'license_id': 'str',
        'is_osi_approved': 'bool',
        'is_fsf_libre': 'bool',
        'is_deprecated_license_id': 'bool',
        'is_custom_license': 'bool',
        'see_also': 'list[str]'
    }

    attribute_map = {
        'license_groups': 'licenseGroups',
        'uuid': 'uuid',
        'name': 'name',
        'license_text': 'licenseText',
        'standard_license_template': 'standardLicenseTemplate',
        'standard_license_header': 'standardLicenseHeader',
        'license_comments': 'licenseComments',
        'license_id': 'licenseId',
        'is_osi_approved': 'isOsiApproved',
        'is_fsf_libre': 'isFsfLibre',
        'is_deprecated_license_id': 'isDeprecatedLicenseId',
        'is_custom_license': 'isCustomLicense',
        'see_also': 'seeAlso'
    }

    def __init__(self, license_groups=None, uuid=None, name=None, license_text=None, standard_license_template=None, standard_license_header=None, license_comments=None, license_id=None, is_osi_approved=None, is_fsf_libre=None, is_deprecated_license_id=None, is_custom_license=None, see_also=None):  # noqa: E501
        """License - a model defined in Swagger"""  # noqa: E501
        self._license_groups = None
        self._uuid = None
        self._name = None
        self._license_text = None
        self._standard_license_template = None
        self._standard_license_header = None
        self._license_comments = None
        self._license_id = None
        self._is_osi_approved = None
        self._is_fsf_libre = None
        self._is_deprecated_license_id = None
        self._is_custom_license = None
        self._see_also = None
        self.discriminator = None
        if license_groups is not None:
            self.license_groups = license_groups
        self.uuid = uuid
        if name is not None:
            self.name = name
        if license_text is not None:
            self.license_text = license_text
        if standard_license_template is not None:
            self.standard_license_template = standard_license_template
        if standard_license_header is not None:
            self.standard_license_header = standard_license_header
        if license_comments is not None:
            self.license_comments = license_comments
        if license_id is not None:
            self.license_id = license_id
        if is_osi_approved is not None:
            self.is_osi_approved = is_osi_approved
        if is_fsf_libre is not None:
            self.is_fsf_libre = is_fsf_libre
        if is_deprecated_license_id is not None:
            self.is_deprecated_license_id = is_deprecated_license_id
        if is_custom_license is not None:
            self.is_custom_license = is_custom_license
        if see_also is not None:
            self.see_also = see_also

    @property
    def license_groups(self):
        """Gets the license_groups of this License.  # noqa: E501


        :return: The license_groups of this License.  # noqa: E501
        :rtype: list[LicenseGroup]
        """
        return self._license_groups

    @license_groups.setter
    def license_groups(self, license_groups):
        """Sets the license_groups of this License.


        :param license_groups: The license_groups of this License.  # noqa: E501
        :type: list[LicenseGroup]
        """

        self._license_groups = license_groups

    @property
    def uuid(self):
        """Gets the uuid of this License.  # noqa: E501


        :return: The uuid of this License.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this License.


        :param uuid: The uuid of this License.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this License.  # noqa: E501


        :return: The name of this License.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this License.


        :param name: The name of this License.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def license_text(self):
        """Gets the license_text of this License.  # noqa: E501


        :return: The license_text of this License.  # noqa: E501
        :rtype: str
        """
        return self._license_text

    @license_text.setter
    def license_text(self, license_text):
        """Sets the license_text of this License.


        :param license_text: The license_text of this License.  # noqa: E501
        :type: str
        """

        self._license_text = license_text

    @property
    def standard_license_template(self):
        """Gets the standard_license_template of this License.  # noqa: E501


        :return: The standard_license_template of this License.  # noqa: E501
        :rtype: str
        """
        return self._standard_license_template

    @standard_license_template.setter
    def standard_license_template(self, standard_license_template):
        """Sets the standard_license_template of this License.


        :param standard_license_template: The standard_license_template of this License.  # noqa: E501
        :type: str
        """

        self._standard_license_template = standard_license_template

    @property
    def standard_license_header(self):
        """Gets the standard_license_header of this License.  # noqa: E501


        :return: The standard_license_header of this License.  # noqa: E501
        :rtype: str
        """
        return self._standard_license_header

    @standard_license_header.setter
    def standard_license_header(self, standard_license_header):
        """Sets the standard_license_header of this License.


        :param standard_license_header: The standard_license_header of this License.  # noqa: E501
        :type: str
        """

        self._standard_license_header = standard_license_header

    @property
    def license_comments(self):
        """Gets the license_comments of this License.  # noqa: E501


        :return: The license_comments of this License.  # noqa: E501
        :rtype: str
        """
        return self._license_comments

    @license_comments.setter
    def license_comments(self, license_comments):
        """Sets the license_comments of this License.


        :param license_comments: The license_comments of this License.  # noqa: E501
        :type: str
        """

        self._license_comments = license_comments

    @property
    def license_id(self):
        """Gets the license_id of this License.  # noqa: E501


        :return: The license_id of this License.  # noqa: E501
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this License.


        :param license_id: The license_id of this License.  # noqa: E501
        :type: str
        """

        self._license_id = license_id

    @property
    def is_osi_approved(self):
        """Gets the is_osi_approved of this License.  # noqa: E501


        :return: The is_osi_approved of this License.  # noqa: E501
        :rtype: bool
        """
        return self._is_osi_approved

    @is_osi_approved.setter
    def is_osi_approved(self, is_osi_approved):
        """Sets the is_osi_approved of this License.


        :param is_osi_approved: The is_osi_approved of this License.  # noqa: E501
        :type: bool
        """

        self._is_osi_approved = is_osi_approved

    @property
    def is_fsf_libre(self):
        """Gets the is_fsf_libre of this License.  # noqa: E501


        :return: The is_fsf_libre of this License.  # noqa: E501
        :rtype: bool
        """
        return self._is_fsf_libre

    @is_fsf_libre.setter
    def is_fsf_libre(self, is_fsf_libre):
        """Sets the is_fsf_libre of this License.


        :param is_fsf_libre: The is_fsf_libre of this License.  # noqa: E501
        :type: bool
        """

        self._is_fsf_libre = is_fsf_libre

    @property
    def is_deprecated_license_id(self):
        """Gets the is_deprecated_license_id of this License.  # noqa: E501


        :return: The is_deprecated_license_id of this License.  # noqa: E501
        :rtype: bool
        """
        return self._is_deprecated_license_id

    @is_deprecated_license_id.setter
    def is_deprecated_license_id(self, is_deprecated_license_id):
        """Sets the is_deprecated_license_id of this License.


        :param is_deprecated_license_id: The is_deprecated_license_id of this License.  # noqa: E501
        :type: bool
        """

        self._is_deprecated_license_id = is_deprecated_license_id

    @property
    def is_custom_license(self):
        """Gets the is_custom_license of this License.  # noqa: E501


        :return: The is_custom_license of this License.  # noqa: E501
        :rtype: bool
        """
        return self._is_custom_license

    @is_custom_license.setter
    def is_custom_license(self, is_custom_license):
        """Sets the is_custom_license of this License.


        :param is_custom_license: The is_custom_license of this License.  # noqa: E501
        :type: bool
        """

        self._is_custom_license = is_custom_license

    @property
    def see_also(self):
        """Gets the see_also of this License.  # noqa: E501


        :return: The see_also of this License.  # noqa: E501
        :rtype: list[str]
        """
        return self._see_also

    @see_also.setter
    def see_also(self, see_also):
        """Sets the see_also of this License.


        :param see_also: The see_also of this License.  # noqa: E501
        :type: list[str]
        """

        self._see_also = see_also

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(License, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
