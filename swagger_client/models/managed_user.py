# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ManagedUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'last_password_change': 'datetime',
        'fullname': 'str',
        'email': 'str',
        'suspended': 'bool',
        'force_password_change': 'bool',
        'non_expiry_password': 'bool',
        'teams': 'list[Team]',
        'permissions': 'list[Permission]',
        'new_password': 'str',
        'confirm_password': 'str'
    }

    attribute_map = {
        'username': 'username',
        'last_password_change': 'lastPasswordChange',
        'fullname': 'fullname',
        'email': 'email',
        'suspended': 'suspended',
        'force_password_change': 'forcePasswordChange',
        'non_expiry_password': 'nonExpiryPassword',
        'teams': 'teams',
        'permissions': 'permissions',
        'new_password': 'newPassword',
        'confirm_password': 'confirmPassword'
    }

    def __init__(self, username=None, last_password_change=None, fullname=None, email=None, suspended=None, force_password_change=None, non_expiry_password=None, teams=None, permissions=None, new_password=None, confirm_password=None):  # noqa: E501
        """ManagedUser - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._last_password_change = None
        self._fullname = None
        self._email = None
        self._suspended = None
        self._force_password_change = None
        self._non_expiry_password = None
        self._teams = None
        self._permissions = None
        self._new_password = None
        self._confirm_password = None
        self.discriminator = None
        if username is not None:
            self.username = username
        self.last_password_change = last_password_change
        if fullname is not None:
            self.fullname = fullname
        if email is not None:
            self.email = email
        if suspended is not None:
            self.suspended = suspended
        if force_password_change is not None:
            self.force_password_change = force_password_change
        if non_expiry_password is not None:
            self.non_expiry_password = non_expiry_password
        if teams is not None:
            self.teams = teams
        if permissions is not None:
            self.permissions = permissions
        if new_password is not None:
            self.new_password = new_password
        if confirm_password is not None:
            self.confirm_password = confirm_password

    @property
    def username(self):
        """Gets the username of this ManagedUser.  # noqa: E501


        :return: The username of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ManagedUser.


        :param username: The username of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def last_password_change(self):
        """Gets the last_password_change of this ManagedUser.  # noqa: E501


        :return: The last_password_change of this ManagedUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_password_change

    @last_password_change.setter
    def last_password_change(self, last_password_change):
        """Sets the last_password_change of this ManagedUser.


        :param last_password_change: The last_password_change of this ManagedUser.  # noqa: E501
        :type: datetime
        """
        if last_password_change is None:
            raise ValueError("Invalid value for `last_password_change`, must not be `None`")  # noqa: E501

        self._last_password_change = last_password_change

    @property
    def fullname(self):
        """Gets the fullname of this ManagedUser.  # noqa: E501


        :return: The fullname of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this ManagedUser.


        :param fullname: The fullname of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def email(self):
        """Gets the email of this ManagedUser.  # noqa: E501


        :return: The email of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ManagedUser.


        :param email: The email of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def suspended(self):
        """Gets the suspended of this ManagedUser.  # noqa: E501


        :return: The suspended of this ManagedUser.  # noqa: E501
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this ManagedUser.


        :param suspended: The suspended of this ManagedUser.  # noqa: E501
        :type: bool
        """

        self._suspended = suspended

    @property
    def force_password_change(self):
        """Gets the force_password_change of this ManagedUser.  # noqa: E501


        :return: The force_password_change of this ManagedUser.  # noqa: E501
        :rtype: bool
        """
        return self._force_password_change

    @force_password_change.setter
    def force_password_change(self, force_password_change):
        """Sets the force_password_change of this ManagedUser.


        :param force_password_change: The force_password_change of this ManagedUser.  # noqa: E501
        :type: bool
        """

        self._force_password_change = force_password_change

    @property
    def non_expiry_password(self):
        """Gets the non_expiry_password of this ManagedUser.  # noqa: E501


        :return: The non_expiry_password of this ManagedUser.  # noqa: E501
        :rtype: bool
        """
        return self._non_expiry_password

    @non_expiry_password.setter
    def non_expiry_password(self, non_expiry_password):
        """Sets the non_expiry_password of this ManagedUser.


        :param non_expiry_password: The non_expiry_password of this ManagedUser.  # noqa: E501
        :type: bool
        """

        self._non_expiry_password = non_expiry_password

    @property
    def teams(self):
        """Gets the teams of this ManagedUser.  # noqa: E501


        :return: The teams of this ManagedUser.  # noqa: E501
        :rtype: list[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ManagedUser.


        :param teams: The teams of this ManagedUser.  # noqa: E501
        :type: list[Team]
        """

        self._teams = teams

    @property
    def permissions(self):
        """Gets the permissions of this ManagedUser.  # noqa: E501


        :return: The permissions of this ManagedUser.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ManagedUser.


        :param permissions: The permissions of this ManagedUser.  # noqa: E501
        :type: list[Permission]
        """

        self._permissions = permissions

    @property
    def new_password(self):
        """Gets the new_password of this ManagedUser.  # noqa: E501


        :return: The new_password of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this ManagedUser.


        :param new_password: The new_password of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._new_password = new_password

    @property
    def confirm_password(self):
        """Gets the confirm_password of this ManagedUser.  # noqa: E501


        :return: The confirm_password of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._confirm_password

    @confirm_password.setter
    def confirm_password(self, confirm_password):
        """Sets the confirm_password of this ManagedUser.


        :param confirm_password: The confirm_password of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._confirm_password = confirm_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagedUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagedUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
