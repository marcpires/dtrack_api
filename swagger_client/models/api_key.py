# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'created': 'datetime',
        'last_used': 'datetime',
        'public_id': 'str',
        'key': 'str',
        'legacy': 'bool',
        'masked_key': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'created': 'created',
        'last_used': 'lastUsed',
        'public_id': 'publicId',
        'key': 'key',
        'legacy': 'legacy',
        'masked_key': 'maskedKey'
    }

    def __init__(self, comment=None, created=None, last_used=None, public_id=None, key=None, legacy=None, masked_key=None):  # noqa: E501
        """ApiKey - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._created = None
        self._last_used = None
        self._public_id = None
        self._key = None
        self._legacy = None
        self._masked_key = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        if created is not None:
            self.created = created
        if last_used is not None:
            self.last_used = last_used
        if public_id is not None:
            self.public_id = public_id
        if key is not None:
            self.key = key
        if legacy is not None:
            self.legacy = legacy
        if masked_key is not None:
            self.masked_key = masked_key

    @property
    def comment(self):
        """Gets the comment of this ApiKey.  # noqa: E501


        :return: The comment of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ApiKey.


        :param comment: The comment of this ApiKey.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created(self):
        """Gets the created of this ApiKey.  # noqa: E501


        :return: The created of this ApiKey.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ApiKey.


        :param created: The created of this ApiKey.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def last_used(self):
        """Gets the last_used of this ApiKey.  # noqa: E501


        :return: The last_used of this ApiKey.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this ApiKey.


        :param last_used: The last_used of this ApiKey.  # noqa: E501
        :type: datetime
        """

        self._last_used = last_used

    @property
    def public_id(self):
        """Gets the public_id of this ApiKey.  # noqa: E501


        :return: The public_id of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this ApiKey.


        :param public_id: The public_id of this ApiKey.  # noqa: E501
        :type: str
        """

        self._public_id = public_id

    @property
    def key(self):
        """Gets the key of this ApiKey.  # noqa: E501


        :return: The key of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApiKey.


        :param key: The key of this ApiKey.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def legacy(self):
        """Gets the legacy of this ApiKey.  # noqa: E501


        :return: The legacy of this ApiKey.  # noqa: E501
        :rtype: bool
        """
        return self._legacy

    @legacy.setter
    def legacy(self, legacy):
        """Sets the legacy of this ApiKey.


        :param legacy: The legacy of this ApiKey.  # noqa: E501
        :type: bool
        """

        self._legacy = legacy

    @property
    def masked_key(self):
        """Gets the masked_key of this ApiKey.  # noqa: E501


        :return: The masked_key of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._masked_key

    @masked_key.setter
    def masked_key(self, masked_key):
        """Sets the masked_key of this ApiKey.


        :param masked_key: The masked_key of this ApiKey.  # noqa: E501
        :type: str
        """

        self._masked_key = masked_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
