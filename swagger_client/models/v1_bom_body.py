# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1BomBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'str',
        'auto_create': 'bool',
        'project_name': 'str',
        'project_version': 'str',
        'project_tags': 'str',
        'parent_name': 'str',
        'parent_version': 'str',
        'parent_uuid': 'str',
        'is_latest': 'bool',
        'bom': 'str'
    }

    attribute_map = {
        'project': 'project',
        'auto_create': 'autoCreate',
        'project_name': 'projectName',
        'project_version': 'projectVersion',
        'project_tags': 'projectTags',
        'parent_name': 'parentName',
        'parent_version': 'parentVersion',
        'parent_uuid': 'parentUUID',
        'is_latest': 'isLatest',
        'bom': 'bom'
    }

    def __init__(self, project=None, auto_create=False, project_name=None, project_version=None, project_tags=None, parent_name=None, parent_version=None, parent_uuid=None, is_latest=False, bom=None):  # noqa: E501
        """V1BomBody - a model defined in Swagger"""  # noqa: E501
        self._project = None
        self._auto_create = None
        self._project_name = None
        self._project_version = None
        self._project_tags = None
        self._parent_name = None
        self._parent_version = None
        self._parent_uuid = None
        self._is_latest = None
        self._bom = None
        self.discriminator = None
        if project is not None:
            self.project = project
        if auto_create is not None:
            self.auto_create = auto_create
        if project_name is not None:
            self.project_name = project_name
        if project_version is not None:
            self.project_version = project_version
        if project_tags is not None:
            self.project_tags = project_tags
        if parent_name is not None:
            self.parent_name = parent_name
        if parent_version is not None:
            self.parent_version = parent_version
        if parent_uuid is not None:
            self.parent_uuid = parent_uuid
        if is_latest is not None:
            self.is_latest = is_latest
        if bom is not None:
            self.bom = bom

    @property
    def project(self):
        """Gets the project of this V1BomBody.  # noqa: E501


        :return: The project of this V1BomBody.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this V1BomBody.


        :param project: The project of this V1BomBody.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def auto_create(self):
        """Gets the auto_create of this V1BomBody.  # noqa: E501


        :return: The auto_create of this V1BomBody.  # noqa: E501
        :rtype: bool
        """
        return self._auto_create

    @auto_create.setter
    def auto_create(self, auto_create):
        """Sets the auto_create of this V1BomBody.


        :param auto_create: The auto_create of this V1BomBody.  # noqa: E501
        :type: bool
        """

        self._auto_create = auto_create

    @property
    def project_name(self):
        """Gets the project_name of this V1BomBody.  # noqa: E501


        :return: The project_name of this V1BomBody.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this V1BomBody.


        :param project_name: The project_name of this V1BomBody.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def project_version(self):
        """Gets the project_version of this V1BomBody.  # noqa: E501


        :return: The project_version of this V1BomBody.  # noqa: E501
        :rtype: str
        """
        return self._project_version

    @project_version.setter
    def project_version(self, project_version):
        """Sets the project_version of this V1BomBody.


        :param project_version: The project_version of this V1BomBody.  # noqa: E501
        :type: str
        """

        self._project_version = project_version

    @property
    def project_tags(self):
        """Gets the project_tags of this V1BomBody.  # noqa: E501


        :return: The project_tags of this V1BomBody.  # noqa: E501
        :rtype: str
        """
        return self._project_tags

    @project_tags.setter
    def project_tags(self, project_tags):
        """Sets the project_tags of this V1BomBody.


        :param project_tags: The project_tags of this V1BomBody.  # noqa: E501
        :type: str
        """

        self._project_tags = project_tags

    @property
    def parent_name(self):
        """Gets the parent_name of this V1BomBody.  # noqa: E501


        :return: The parent_name of this V1BomBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this V1BomBody.


        :param parent_name: The parent_name of this V1BomBody.  # noqa: E501
        :type: str
        """

        self._parent_name = parent_name

    @property
    def parent_version(self):
        """Gets the parent_version of this V1BomBody.  # noqa: E501


        :return: The parent_version of this V1BomBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_version

    @parent_version.setter
    def parent_version(self, parent_version):
        """Sets the parent_version of this V1BomBody.


        :param parent_version: The parent_version of this V1BomBody.  # noqa: E501
        :type: str
        """

        self._parent_version = parent_version

    @property
    def parent_uuid(self):
        """Gets the parent_uuid of this V1BomBody.  # noqa: E501


        :return: The parent_uuid of this V1BomBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_uuid

    @parent_uuid.setter
    def parent_uuid(self, parent_uuid):
        """Sets the parent_uuid of this V1BomBody.


        :param parent_uuid: The parent_uuid of this V1BomBody.  # noqa: E501
        :type: str
        """

        self._parent_uuid = parent_uuid

    @property
    def is_latest(self):
        """Gets the is_latest of this V1BomBody.  # noqa: E501


        :return: The is_latest of this V1BomBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this V1BomBody.


        :param is_latest: The is_latest of this V1BomBody.  # noqa: E501
        :type: bool
        """

        self._is_latest = is_latest

    @property
    def bom(self):
        """Gets the bom of this V1BomBody.  # noqa: E501


        :return: The bom of this V1BomBody.  # noqa: E501
        :rtype: str
        """
        return self._bom

    @bom.setter
    def bom(self, bom):
        """Sets the bom of this V1BomBody.


        :param bom: The bom of this V1BomBody.  # noqa: E501
        :type: str
        """

        self._bom = bom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1BomBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1BomBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
