# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateScheduledNotificationRuleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'scope': 'str',
        'notification_level': 'str',
        'publisher': 'Publisher'
    }

    attribute_map = {
        'name': 'name',
        'scope': 'scope',
        'notification_level': 'notificationLevel',
        'publisher': 'publisher'
    }

    def __init__(self, name=None, scope=None, notification_level=None, publisher=None):  # noqa: E501
        """CreateScheduledNotificationRuleRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._scope = None
        self._notification_level = None
        self._publisher = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.scope = scope
        self.notification_level = notification_level
        self.publisher = publisher

    @property
    def name(self):
        """Gets the name of this CreateScheduledNotificationRuleRequest.  # noqa: E501


        :return: The name of this CreateScheduledNotificationRuleRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateScheduledNotificationRuleRequest.


        :param name: The name of this CreateScheduledNotificationRuleRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def scope(self):
        """Gets the scope of this CreateScheduledNotificationRuleRequest.  # noqa: E501


        :return: The scope of this CreateScheduledNotificationRuleRequest.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CreateScheduledNotificationRuleRequest.


        :param scope: The scope of this CreateScheduledNotificationRuleRequest.  # noqa: E501
        :type: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501
        allowed_values = ["SYSTEM", "PORTFOLIO"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def notification_level(self):
        """Gets the notification_level of this CreateScheduledNotificationRuleRequest.  # noqa: E501


        :return: The notification_level of this CreateScheduledNotificationRuleRequest.  # noqa: E501
        :rtype: str
        """
        return self._notification_level

    @notification_level.setter
    def notification_level(self, notification_level):
        """Sets the notification_level of this CreateScheduledNotificationRuleRequest.


        :param notification_level: The notification_level of this CreateScheduledNotificationRuleRequest.  # noqa: E501
        :type: str
        """
        if notification_level is None:
            raise ValueError("Invalid value for `notification_level`, must not be `None`")  # noqa: E501
        allowed_values = ["INFORMATIONAL", "WARNING", "ERROR"]  # noqa: E501
        if notification_level not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_level` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_level, allowed_values)
            )

        self._notification_level = notification_level

    @property
    def publisher(self):
        """Gets the publisher of this CreateScheduledNotificationRuleRequest.  # noqa: E501


        :return: The publisher of this CreateScheduledNotificationRuleRequest.  # noqa: E501
        :rtype: Publisher
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this CreateScheduledNotificationRuleRequest.


        :param publisher: The publisher of this CreateScheduledNotificationRuleRequest.  # noqa: E501
        :type: Publisher
        """
        if publisher is None:
            raise ValueError("Invalid value for `publisher`, must not be `None`")  # noqa: E501

        self._publisher = publisher

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateScheduledNotificationRuleRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateScheduledNotificationRuleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
