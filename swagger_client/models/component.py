# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Component(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authors': 'list[OrganizationalContact]',
        'publisher': 'str',
        'supplier': 'OrganizationalEntity',
        'group': 'str',
        'name': 'str',
        'version': 'str',
        'classifier': 'str',
        'filename': 'str',
        'extension': 'str',
        'md5': 'str',
        'sha1': 'str',
        'sha256': 'str',
        'sha384': 'str',
        'sha512': 'str',
        'sha3_256': 'str',
        'sha3_384': 'str',
        'sha3_512': 'str',
        'blake2b_256': 'str',
        'blake2b_384': 'str',
        'blake2b_512': 'str',
        'blake3': 'str',
        'cpe': 'str',
        'purl': 'str',
        'purl_coordinates': 'str',
        'swid_tag_id': 'str',
        'description': 'str',
        'copyright': 'str',
        'license': 'str',
        'license_expression': 'str',
        'license_url': 'str',
        'resolved_license': 'License',
        'direct_dependencies': 'str',
        'external_references': 'list[ExternalReference]',
        'parent': 'Component',
        'children': 'list[Component]',
        'properties': 'list[ComponentProperty]',
        'vulnerabilities': 'list[Vulnerability]',
        'project': 'Project',
        'last_inherited_risk_score': 'float',
        'notes': 'str',
        'uuid': 'str',
        'author': 'str',
        'metrics': 'DependencyMetrics',
        'repository_meta': 'RepositoryMetaComponent',
        'dependency_graph': 'list[str]',
        'expand_dependency_graph': 'bool',
        'is_internal': 'bool'
    }

    attribute_map = {
        'authors': 'authors',
        'publisher': 'publisher',
        'supplier': 'supplier',
        'group': 'group',
        'name': 'name',
        'version': 'version',
        'classifier': 'classifier',
        'filename': 'filename',
        'extension': 'extension',
        'md5': 'md5',
        'sha1': 'sha1',
        'sha256': 'sha256',
        'sha384': 'sha384',
        'sha512': 'sha512',
        'sha3_256': 'sha3_256',
        'sha3_384': 'sha3_384',
        'sha3_512': 'sha3_512',
        'blake2b_256': 'blake2b_256',
        'blake2b_384': 'blake2b_384',
        'blake2b_512': 'blake2b_512',
        'blake3': 'blake3',
        'cpe': 'cpe',
        'purl': 'purl',
        'purl_coordinates': 'purlCoordinates',
        'swid_tag_id': 'swidTagId',
        'description': 'description',
        'copyright': 'copyright',
        'license': 'license',
        'license_expression': 'licenseExpression',
        'license_url': 'licenseUrl',
        'resolved_license': 'resolvedLicense',
        'direct_dependencies': 'directDependencies',
        'external_references': 'externalReferences',
        'parent': 'parent',
        'children': 'children',
        'properties': 'properties',
        'vulnerabilities': 'vulnerabilities',
        'project': 'project',
        'last_inherited_risk_score': 'lastInheritedRiskScore',
        'notes': 'notes',
        'uuid': 'uuid',
        'author': 'author',
        'metrics': 'metrics',
        'repository_meta': 'repositoryMeta',
        'dependency_graph': 'dependencyGraph',
        'expand_dependency_graph': 'expandDependencyGraph',
        'is_internal': 'isInternal'
    }

    def __init__(self, authors=None, publisher=None, supplier=None, group=None, name=None, version=None, classifier=None, filename=None, extension=None, md5=None, sha1=None, sha256=None, sha384=None, sha512=None, sha3_256=None, sha3_384=None, sha3_512=None, blake2b_256=None, blake2b_384=None, blake2b_512=None, blake3=None, cpe=None, purl=None, purl_coordinates=None, swid_tag_id=None, description=None, copyright=None, license=None, license_expression=None, license_url=None, resolved_license=None, direct_dependencies=None, external_references=None, parent=None, children=None, properties=None, vulnerabilities=None, project=None, last_inherited_risk_score=None, notes=None, uuid=None, author=None, metrics=None, repository_meta=None, dependency_graph=None, expand_dependency_graph=None, is_internal=None):  # noqa: E501
        """Component - a model defined in Swagger"""  # noqa: E501
        self._authors = None
        self._publisher = None
        self._supplier = None
        self._group = None
        self._name = None
        self._version = None
        self._classifier = None
        self._filename = None
        self._extension = None
        self._md5 = None
        self._sha1 = None
        self._sha256 = None
        self._sha384 = None
        self._sha512 = None
        self._sha3_256 = None
        self._sha3_384 = None
        self._sha3_512 = None
        self._blake2b_256 = None
        self._blake2b_384 = None
        self._blake2b_512 = None
        self._blake3 = None
        self._cpe = None
        self._purl = None
        self._purl_coordinates = None
        self._swid_tag_id = None
        self._description = None
        self._copyright = None
        self._license = None
        self._license_expression = None
        self._license_url = None
        self._resolved_license = None
        self._direct_dependencies = None
        self._external_references = None
        self._parent = None
        self._children = None
        self._properties = None
        self._vulnerabilities = None
        self._project = None
        self._last_inherited_risk_score = None
        self._notes = None
        self._uuid = None
        self._author = None
        self._metrics = None
        self._repository_meta = None
        self._dependency_graph = None
        self._expand_dependency_graph = None
        self._is_internal = None
        self.discriminator = None
        if authors is not None:
            self.authors = authors
        if publisher is not None:
            self.publisher = publisher
        if supplier is not None:
            self.supplier = supplier
        if group is not None:
            self.group = group
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        self.classifier = classifier
        if filename is not None:
            self.filename = filename
        if extension is not None:
            self.extension = extension
        if md5 is not None:
            self.md5 = md5
        if sha1 is not None:
            self.sha1 = sha1
        if sha256 is not None:
            self.sha256 = sha256
        if sha384 is not None:
            self.sha384 = sha384
        if sha512 is not None:
            self.sha512 = sha512
        if sha3_256 is not None:
            self.sha3_256 = sha3_256
        if sha3_384 is not None:
            self.sha3_384 = sha3_384
        if sha3_512 is not None:
            self.sha3_512 = sha3_512
        if blake2b_256 is not None:
            self.blake2b_256 = blake2b_256
        if blake2b_384 is not None:
            self.blake2b_384 = blake2b_384
        if blake2b_512 is not None:
            self.blake2b_512 = blake2b_512
        if blake3 is not None:
            self.blake3 = blake3
        if cpe is not None:
            self.cpe = cpe
        if purl is not None:
            self.purl = purl
        if purl_coordinates is not None:
            self.purl_coordinates = purl_coordinates
        if swid_tag_id is not None:
            self.swid_tag_id = swid_tag_id
        if description is not None:
            self.description = description
        if copyright is not None:
            self.copyright = copyright
        if license is not None:
            self.license = license
        if license_expression is not None:
            self.license_expression = license_expression
        if license_url is not None:
            self.license_url = license_url
        if resolved_license is not None:
            self.resolved_license = resolved_license
        if direct_dependencies is not None:
            self.direct_dependencies = direct_dependencies
        if external_references is not None:
            self.external_references = external_references
        if parent is not None:
            self.parent = parent
        if children is not None:
            self.children = children
        if properties is not None:
            self.properties = properties
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities
        self.project = project
        if last_inherited_risk_score is not None:
            self.last_inherited_risk_score = last_inherited_risk_score
        if notes is not None:
            self.notes = notes
        self.uuid = uuid
        if author is not None:
            self.author = author
        if metrics is not None:
            self.metrics = metrics
        if repository_meta is not None:
            self.repository_meta = repository_meta
        if dependency_graph is not None:
            self.dependency_graph = dependency_graph
        if expand_dependency_graph is not None:
            self.expand_dependency_graph = expand_dependency_graph
        if is_internal is not None:
            self.is_internal = is_internal

    @property
    def authors(self):
        """Gets the authors of this Component.  # noqa: E501


        :return: The authors of this Component.  # noqa: E501
        :rtype: list[OrganizationalContact]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Component.


        :param authors: The authors of this Component.  # noqa: E501
        :type: list[OrganizationalContact]
        """

        self._authors = authors

    @property
    def publisher(self):
        """Gets the publisher of this Component.  # noqa: E501


        :return: The publisher of this Component.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Component.


        :param publisher: The publisher of this Component.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def supplier(self):
        """Gets the supplier of this Component.  # noqa: E501


        :return: The supplier of this Component.  # noqa: E501
        :rtype: OrganizationalEntity
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this Component.


        :param supplier: The supplier of this Component.  # noqa: E501
        :type: OrganizationalEntity
        """

        self._supplier = supplier

    @property
    def group(self):
        """Gets the group of this Component.  # noqa: E501


        :return: The group of this Component.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Component.


        :param group: The group of this Component.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def name(self):
        """Gets the name of this Component.  # noqa: E501


        :return: The name of this Component.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Component.


        :param name: The name of this Component.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this Component.  # noqa: E501


        :return: The version of this Component.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Component.


        :param version: The version of this Component.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def classifier(self):
        """Gets the classifier of this Component.  # noqa: E501


        :return: The classifier of this Component.  # noqa: E501
        :rtype: str
        """
        return self._classifier

    @classifier.setter
    def classifier(self, classifier):
        """Sets the classifier of this Component.


        :param classifier: The classifier of this Component.  # noqa: E501
        :type: str
        """
        if classifier is None:
            raise ValueError("Invalid value for `classifier`, must not be `None`")  # noqa: E501
        allowed_values = ["NONE", "APPLICATION", "FRAMEWORK", "LIBRARY", "CONTAINER", "OPERATING_SYSTEM", "DEVICE", "FIRMWARE", "FILE", "PLATFORM", "DEVICE_DRIVER", "MACHINE_LEARNING_MODEL", "DATA"]  # noqa: E501
        if classifier not in allowed_values:
            raise ValueError(
                "Invalid value for `classifier` ({0}), must be one of {1}"  # noqa: E501
                .format(classifier, allowed_values)
            )

        self._classifier = classifier

    @property
    def filename(self):
        """Gets the filename of this Component.  # noqa: E501


        :return: The filename of this Component.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Component.


        :param filename: The filename of this Component.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def extension(self):
        """Gets the extension of this Component.  # noqa: E501


        :return: The extension of this Component.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this Component.


        :param extension: The extension of this Component.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def md5(self):
        """Gets the md5 of this Component.  # noqa: E501


        :return: The md5 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this Component.


        :param md5: The md5 of this Component.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    @property
    def sha1(self):
        """Gets the sha1 of this Component.  # noqa: E501


        :return: The sha1 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this Component.


        :param sha1: The sha1 of this Component.  # noqa: E501
        :type: str
        """

        self._sha1 = sha1

    @property
    def sha256(self):
        """Gets the sha256 of this Component.  # noqa: E501


        :return: The sha256 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this Component.


        :param sha256: The sha256 of this Component.  # noqa: E501
        :type: str
        """

        self._sha256 = sha256

    @property
    def sha384(self):
        """Gets the sha384 of this Component.  # noqa: E501


        :return: The sha384 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._sha384

    @sha384.setter
    def sha384(self, sha384):
        """Sets the sha384 of this Component.


        :param sha384: The sha384 of this Component.  # noqa: E501
        :type: str
        """

        self._sha384 = sha384

    @property
    def sha512(self):
        """Gets the sha512 of this Component.  # noqa: E501


        :return: The sha512 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._sha512

    @sha512.setter
    def sha512(self, sha512):
        """Sets the sha512 of this Component.


        :param sha512: The sha512 of this Component.  # noqa: E501
        :type: str
        """

        self._sha512 = sha512

    @property
    def sha3_256(self):
        """Gets the sha3_256 of this Component.  # noqa: E501


        :return: The sha3_256 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._sha3_256

    @sha3_256.setter
    def sha3_256(self, sha3_256):
        """Sets the sha3_256 of this Component.


        :param sha3_256: The sha3_256 of this Component.  # noqa: E501
        :type: str
        """

        self._sha3_256 = sha3_256

    @property
    def sha3_384(self):
        """Gets the sha3_384 of this Component.  # noqa: E501


        :return: The sha3_384 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._sha3_384

    @sha3_384.setter
    def sha3_384(self, sha3_384):
        """Sets the sha3_384 of this Component.


        :param sha3_384: The sha3_384 of this Component.  # noqa: E501
        :type: str
        """

        self._sha3_384 = sha3_384

    @property
    def sha3_512(self):
        """Gets the sha3_512 of this Component.  # noqa: E501


        :return: The sha3_512 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._sha3_512

    @sha3_512.setter
    def sha3_512(self, sha3_512):
        """Sets the sha3_512 of this Component.


        :param sha3_512: The sha3_512 of this Component.  # noqa: E501
        :type: str
        """

        self._sha3_512 = sha3_512

    @property
    def blake2b_256(self):
        """Gets the blake2b_256 of this Component.  # noqa: E501


        :return: The blake2b_256 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._blake2b_256

    @blake2b_256.setter
    def blake2b_256(self, blake2b_256):
        """Sets the blake2b_256 of this Component.


        :param blake2b_256: The blake2b_256 of this Component.  # noqa: E501
        :type: str
        """

        self._blake2b_256 = blake2b_256

    @property
    def blake2b_384(self):
        """Gets the blake2b_384 of this Component.  # noqa: E501


        :return: The blake2b_384 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._blake2b_384

    @blake2b_384.setter
    def blake2b_384(self, blake2b_384):
        """Sets the blake2b_384 of this Component.


        :param blake2b_384: The blake2b_384 of this Component.  # noqa: E501
        :type: str
        """

        self._blake2b_384 = blake2b_384

    @property
    def blake2b_512(self):
        """Gets the blake2b_512 of this Component.  # noqa: E501


        :return: The blake2b_512 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._blake2b_512

    @blake2b_512.setter
    def blake2b_512(self, blake2b_512):
        """Sets the blake2b_512 of this Component.


        :param blake2b_512: The blake2b_512 of this Component.  # noqa: E501
        :type: str
        """

        self._blake2b_512 = blake2b_512

    @property
    def blake3(self):
        """Gets the blake3 of this Component.  # noqa: E501


        :return: The blake3 of this Component.  # noqa: E501
        :rtype: str
        """
        return self._blake3

    @blake3.setter
    def blake3(self, blake3):
        """Sets the blake3 of this Component.


        :param blake3: The blake3 of this Component.  # noqa: E501
        :type: str
        """

        self._blake3 = blake3

    @property
    def cpe(self):
        """Gets the cpe of this Component.  # noqa: E501


        :return: The cpe of this Component.  # noqa: E501
        :rtype: str
        """
        return self._cpe

    @cpe.setter
    def cpe(self, cpe):
        """Sets the cpe of this Component.


        :param cpe: The cpe of this Component.  # noqa: E501
        :type: str
        """

        self._cpe = cpe

    @property
    def purl(self):
        """Gets the purl of this Component.  # noqa: E501


        :return: The purl of this Component.  # noqa: E501
        :rtype: str
        """
        return self._purl

    @purl.setter
    def purl(self, purl):
        """Sets the purl of this Component.


        :param purl: The purl of this Component.  # noqa: E501
        :type: str
        """

        self._purl = purl

    @property
    def purl_coordinates(self):
        """Gets the purl_coordinates of this Component.  # noqa: E501


        :return: The purl_coordinates of this Component.  # noqa: E501
        :rtype: str
        """
        return self._purl_coordinates

    @purl_coordinates.setter
    def purl_coordinates(self, purl_coordinates):
        """Sets the purl_coordinates of this Component.


        :param purl_coordinates: The purl_coordinates of this Component.  # noqa: E501
        :type: str
        """

        self._purl_coordinates = purl_coordinates

    @property
    def swid_tag_id(self):
        """Gets the swid_tag_id of this Component.  # noqa: E501


        :return: The swid_tag_id of this Component.  # noqa: E501
        :rtype: str
        """
        return self._swid_tag_id

    @swid_tag_id.setter
    def swid_tag_id(self, swid_tag_id):
        """Sets the swid_tag_id of this Component.


        :param swid_tag_id: The swid_tag_id of this Component.  # noqa: E501
        :type: str
        """

        self._swid_tag_id = swid_tag_id

    @property
    def description(self):
        """Gets the description of this Component.  # noqa: E501


        :return: The description of this Component.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Component.


        :param description: The description of this Component.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def copyright(self):
        """Gets the copyright of this Component.  # noqa: E501


        :return: The copyright of this Component.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Component.


        :param copyright: The copyright of this Component.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def license(self):
        """Gets the license of this Component.  # noqa: E501


        :return: The license of this Component.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Component.


        :param license: The license of this Component.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def license_expression(self):
        """Gets the license_expression of this Component.  # noqa: E501


        :return: The license_expression of this Component.  # noqa: E501
        :rtype: str
        """
        return self._license_expression

    @license_expression.setter
    def license_expression(self, license_expression):
        """Sets the license_expression of this Component.


        :param license_expression: The license_expression of this Component.  # noqa: E501
        :type: str
        """

        self._license_expression = license_expression

    @property
    def license_url(self):
        """Gets the license_url of this Component.  # noqa: E501


        :return: The license_url of this Component.  # noqa: E501
        :rtype: str
        """
        return self._license_url

    @license_url.setter
    def license_url(self, license_url):
        """Sets the license_url of this Component.


        :param license_url: The license_url of this Component.  # noqa: E501
        :type: str
        """

        self._license_url = license_url

    @property
    def resolved_license(self):
        """Gets the resolved_license of this Component.  # noqa: E501


        :return: The resolved_license of this Component.  # noqa: E501
        :rtype: License
        """
        return self._resolved_license

    @resolved_license.setter
    def resolved_license(self, resolved_license):
        """Sets the resolved_license of this Component.


        :param resolved_license: The resolved_license of this Component.  # noqa: E501
        :type: License
        """

        self._resolved_license = resolved_license

    @property
    def direct_dependencies(self):
        """Gets the direct_dependencies of this Component.  # noqa: E501


        :return: The direct_dependencies of this Component.  # noqa: E501
        :rtype: str
        """
        return self._direct_dependencies

    @direct_dependencies.setter
    def direct_dependencies(self, direct_dependencies):
        """Sets the direct_dependencies of this Component.


        :param direct_dependencies: The direct_dependencies of this Component.  # noqa: E501
        :type: str
        """

        self._direct_dependencies = direct_dependencies

    @property
    def external_references(self):
        """Gets the external_references of this Component.  # noqa: E501


        :return: The external_references of this Component.  # noqa: E501
        :rtype: list[ExternalReference]
        """
        return self._external_references

    @external_references.setter
    def external_references(self, external_references):
        """Sets the external_references of this Component.


        :param external_references: The external_references of this Component.  # noqa: E501
        :type: list[ExternalReference]
        """

        self._external_references = external_references

    @property
    def parent(self):
        """Gets the parent of this Component.  # noqa: E501


        :return: The parent of this Component.  # noqa: E501
        :rtype: Component
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Component.


        :param parent: The parent of this Component.  # noqa: E501
        :type: Component
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this Component.  # noqa: E501


        :return: The children of this Component.  # noqa: E501
        :rtype: list[Component]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Component.


        :param children: The children of this Component.  # noqa: E501
        :type: list[Component]
        """

        self._children = children

    @property
    def properties(self):
        """Gets the properties of this Component.  # noqa: E501


        :return: The properties of this Component.  # noqa: E501
        :rtype: list[ComponentProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Component.


        :param properties: The properties of this Component.  # noqa: E501
        :type: list[ComponentProperty]
        """

        self._properties = properties

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this Component.  # noqa: E501


        :return: The vulnerabilities of this Component.  # noqa: E501
        :rtype: list[Vulnerability]
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this Component.


        :param vulnerabilities: The vulnerabilities of this Component.  # noqa: E501
        :type: list[Vulnerability]
        """

        self._vulnerabilities = vulnerabilities

    @property
    def project(self):
        """Gets the project of this Component.  # noqa: E501


        :return: The project of this Component.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Component.


        :param project: The project of this Component.  # noqa: E501
        :type: Project
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def last_inherited_risk_score(self):
        """Gets the last_inherited_risk_score of this Component.  # noqa: E501


        :return: The last_inherited_risk_score of this Component.  # noqa: E501
        :rtype: float
        """
        return self._last_inherited_risk_score

    @last_inherited_risk_score.setter
    def last_inherited_risk_score(self, last_inherited_risk_score):
        """Sets the last_inherited_risk_score of this Component.


        :param last_inherited_risk_score: The last_inherited_risk_score of this Component.  # noqa: E501
        :type: float
        """

        self._last_inherited_risk_score = last_inherited_risk_score

    @property
    def notes(self):
        """Gets the notes of this Component.  # noqa: E501


        :return: The notes of this Component.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Component.


        :param notes: The notes of this Component.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def uuid(self):
        """Gets the uuid of this Component.  # noqa: E501


        :return: The uuid of this Component.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Component.


        :param uuid: The uuid of this Component.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def author(self):
        """Gets the author of this Component.  # noqa: E501


        :return: The author of this Component.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Component.


        :param author: The author of this Component.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def metrics(self):
        """Gets the metrics of this Component.  # noqa: E501


        :return: The metrics of this Component.  # noqa: E501
        :rtype: DependencyMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Component.


        :param metrics: The metrics of this Component.  # noqa: E501
        :type: DependencyMetrics
        """

        self._metrics = metrics

    @property
    def repository_meta(self):
        """Gets the repository_meta of this Component.  # noqa: E501


        :return: The repository_meta of this Component.  # noqa: E501
        :rtype: RepositoryMetaComponent
        """
        return self._repository_meta

    @repository_meta.setter
    def repository_meta(self, repository_meta):
        """Sets the repository_meta of this Component.


        :param repository_meta: The repository_meta of this Component.  # noqa: E501
        :type: RepositoryMetaComponent
        """

        self._repository_meta = repository_meta

    @property
    def dependency_graph(self):
        """Gets the dependency_graph of this Component.  # noqa: E501


        :return: The dependency_graph of this Component.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependency_graph

    @dependency_graph.setter
    def dependency_graph(self, dependency_graph):
        """Sets the dependency_graph of this Component.


        :param dependency_graph: The dependency_graph of this Component.  # noqa: E501
        :type: list[str]
        """

        self._dependency_graph = dependency_graph

    @property
    def expand_dependency_graph(self):
        """Gets the expand_dependency_graph of this Component.  # noqa: E501


        :return: The expand_dependency_graph of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._expand_dependency_graph

    @expand_dependency_graph.setter
    def expand_dependency_graph(self, expand_dependency_graph):
        """Sets the expand_dependency_graph of this Component.


        :param expand_dependency_graph: The expand_dependency_graph of this Component.  # noqa: E501
        :type: bool
        """

        self._expand_dependency_graph = expand_dependency_graph

    @property
    def is_internal(self):
        """Gets the is_internal of this Component.  # noqa: E501


        :return: The is_internal of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this Component.


        :param is_internal: The is_internal of this Component.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Component, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Component):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
