# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'identifier': 'str',
        'url': 'str',
        'resolution_order': 'int',
        'enabled': 'bool',
        'internal': 'bool',
        'authentication_required': 'bool',
        'username': 'str',
        'uuid': 'str',
        'password': 'str'
    }

    attribute_map = {
        'type': 'type',
        'identifier': 'identifier',
        'url': 'url',
        'resolution_order': 'resolutionOrder',
        'enabled': 'enabled',
        'internal': 'internal',
        'authentication_required': 'authenticationRequired',
        'username': 'username',
        'uuid': 'uuid',
        'password': 'password'
    }

    def __init__(self, type=None, identifier=None, url=None, resolution_order=None, enabled=None, internal=None, authentication_required=None, username=None, uuid=None, password=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._identifier = None
        self._url = None
        self._resolution_order = None
        self._enabled = None
        self._internal = None
        self._authentication_required = None
        self._username = None
        self._uuid = None
        self._password = None
        self.discriminator = None
        self.type = type
        if identifier is not None:
            self.identifier = identifier
        if url is not None:
            self.url = url
        self.resolution_order = resolution_order
        self.enabled = enabled
        self.internal = internal
        if authentication_required is not None:
            self.authentication_required = authentication_required
        if username is not None:
            self.username = username
        self.uuid = uuid
        if password is not None:
            self.password = password

    @property
    def type(self):
        """Gets the type of this Repository.  # noqa: E501


        :return: The type of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Repository.


        :param type: The type of this Repository.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["CPAN", "MAVEN", "NPM", "GEM", "PYPI", "NUGET", "HEX", "COMPOSER", "CARGO", "GO_MODULES", "GITHUB", "HACKAGE", "NIXPKGS", "UNSUPPORTED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def identifier(self):
        """Gets the identifier of this Repository.  # noqa: E501


        :return: The identifier of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Repository.


        :param identifier: The identifier of this Repository.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def url(self):
        """Gets the url of this Repository.  # noqa: E501


        :return: The url of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Repository.


        :param url: The url of this Repository.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def resolution_order(self):
        """Gets the resolution_order of this Repository.  # noqa: E501


        :return: The resolution_order of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._resolution_order

    @resolution_order.setter
    def resolution_order(self, resolution_order):
        """Sets the resolution_order of this Repository.


        :param resolution_order: The resolution_order of this Repository.  # noqa: E501
        :type: int
        """
        if resolution_order is None:
            raise ValueError("Invalid value for `resolution_order`, must not be `None`")  # noqa: E501

        self._resolution_order = resolution_order

    @property
    def enabled(self):
        """Gets the enabled of this Repository.  # noqa: E501


        :return: The enabled of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Repository.


        :param enabled: The enabled of this Repository.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def internal(self):
        """Gets the internal of this Repository.  # noqa: E501


        :return: The internal of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this Repository.


        :param internal: The internal of this Repository.  # noqa: E501
        :type: bool
        """
        if internal is None:
            raise ValueError("Invalid value for `internal`, must not be `None`")  # noqa: E501

        self._internal = internal

    @property
    def authentication_required(self):
        """Gets the authentication_required of this Repository.  # noqa: E501


        :return: The authentication_required of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_required

    @authentication_required.setter
    def authentication_required(self, authentication_required):
        """Sets the authentication_required of this Repository.


        :param authentication_required: The authentication_required of this Repository.  # noqa: E501
        :type: bool
        """

        self._authentication_required = authentication_required

    @property
    def username(self):
        """Gets the username of this Repository.  # noqa: E501


        :return: The username of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Repository.


        :param username: The username of this Repository.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def uuid(self):
        """Gets the uuid of this Repository.  # noqa: E501


        :return: The uuid of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Repository.


        :param uuid: The uuid of this Repository.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def password(self):
        """Gets the password of this Repository.  # noqa: E501


        :return: The password of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Repository.


        :param password: The password of this Repository.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
