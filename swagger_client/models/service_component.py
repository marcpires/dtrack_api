# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'OrganizationalEntity',
        'group': 'str',
        'name': 'str',
        'version': 'str',
        'description': 'str',
        'endpoints': 'list[str]',
        'authenticated': 'bool',
        'crosses_trust_boundary': 'bool',
        'data': 'list[DataClassification]',
        'external_references': 'list[ExternalReference]',
        'parent': 'ServiceComponent',
        'children': 'list[ServiceComponent]',
        'vulnerabilities': 'list[Vulnerability]',
        'project': 'Project',
        'last_inherited_risk_score': 'float',
        'notes': 'str',
        'uuid': 'str',
        'bom_ref': 'str'
    }

    attribute_map = {
        'provider': 'provider',
        'group': 'group',
        'name': 'name',
        'version': 'version',
        'description': 'description',
        'endpoints': 'endpoints',
        'authenticated': 'authenticated',
        'crosses_trust_boundary': 'crossesTrustBoundary',
        'data': 'data',
        'external_references': 'externalReferences',
        'parent': 'parent',
        'children': 'children',
        'vulnerabilities': 'vulnerabilities',
        'project': 'project',
        'last_inherited_risk_score': 'lastInheritedRiskScore',
        'notes': 'notes',
        'uuid': 'uuid',
        'bom_ref': 'bomRef'
    }

    def __init__(self, provider=None, group=None, name=None, version=None, description=None, endpoints=None, authenticated=None, crosses_trust_boundary=None, data=None, external_references=None, parent=None, children=None, vulnerabilities=None, project=None, last_inherited_risk_score=None, notes=None, uuid=None, bom_ref=None):  # noqa: E501
        """ServiceComponent - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._group = None
        self._name = None
        self._version = None
        self._description = None
        self._endpoints = None
        self._authenticated = None
        self._crosses_trust_boundary = None
        self._data = None
        self._external_references = None
        self._parent = None
        self._children = None
        self._vulnerabilities = None
        self._project = None
        self._last_inherited_risk_score = None
        self._notes = None
        self._uuid = None
        self._bom_ref = None
        self.discriminator = None
        if provider is not None:
            self.provider = provider
        if group is not None:
            self.group = group
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if description is not None:
            self.description = description
        if endpoints is not None:
            self.endpoints = endpoints
        if authenticated is not None:
            self.authenticated = authenticated
        if crosses_trust_boundary is not None:
            self.crosses_trust_boundary = crosses_trust_boundary
        if data is not None:
            self.data = data
        if external_references is not None:
            self.external_references = external_references
        if parent is not None:
            self.parent = parent
        if children is not None:
            self.children = children
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities
        self.project = project
        if last_inherited_risk_score is not None:
            self.last_inherited_risk_score = last_inherited_risk_score
        if notes is not None:
            self.notes = notes
        self.uuid = uuid
        if bom_ref is not None:
            self.bom_ref = bom_ref

    @property
    def provider(self):
        """Gets the provider of this ServiceComponent.  # noqa: E501


        :return: The provider of this ServiceComponent.  # noqa: E501
        :rtype: OrganizationalEntity
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ServiceComponent.


        :param provider: The provider of this ServiceComponent.  # noqa: E501
        :type: OrganizationalEntity
        """

        self._provider = provider

    @property
    def group(self):
        """Gets the group of this ServiceComponent.  # noqa: E501


        :return: The group of this ServiceComponent.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ServiceComponent.


        :param group: The group of this ServiceComponent.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def name(self):
        """Gets the name of this ServiceComponent.  # noqa: E501


        :return: The name of this ServiceComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceComponent.


        :param name: The name of this ServiceComponent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this ServiceComponent.  # noqa: E501


        :return: The version of this ServiceComponent.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceComponent.


        :param version: The version of this ServiceComponent.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """Gets the description of this ServiceComponent.  # noqa: E501


        :return: The description of this ServiceComponent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceComponent.


        :param description: The description of this ServiceComponent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def endpoints(self):
        """Gets the endpoints of this ServiceComponent.  # noqa: E501


        :return: The endpoints of this ServiceComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ServiceComponent.


        :param endpoints: The endpoints of this ServiceComponent.  # noqa: E501
        :type: list[str]
        """

        self._endpoints = endpoints

    @property
    def authenticated(self):
        """Gets the authenticated of this ServiceComponent.  # noqa: E501


        :return: The authenticated of this ServiceComponent.  # noqa: E501
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """Sets the authenticated of this ServiceComponent.


        :param authenticated: The authenticated of this ServiceComponent.  # noqa: E501
        :type: bool
        """

        self._authenticated = authenticated

    @property
    def crosses_trust_boundary(self):
        """Gets the crosses_trust_boundary of this ServiceComponent.  # noqa: E501


        :return: The crosses_trust_boundary of this ServiceComponent.  # noqa: E501
        :rtype: bool
        """
        return self._crosses_trust_boundary

    @crosses_trust_boundary.setter
    def crosses_trust_boundary(self, crosses_trust_boundary):
        """Sets the crosses_trust_boundary of this ServiceComponent.


        :param crosses_trust_boundary: The crosses_trust_boundary of this ServiceComponent.  # noqa: E501
        :type: bool
        """

        self._crosses_trust_boundary = crosses_trust_boundary

    @property
    def data(self):
        """Gets the data of this ServiceComponent.  # noqa: E501


        :return: The data of this ServiceComponent.  # noqa: E501
        :rtype: list[DataClassification]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ServiceComponent.


        :param data: The data of this ServiceComponent.  # noqa: E501
        :type: list[DataClassification]
        """

        self._data = data

    @property
    def external_references(self):
        """Gets the external_references of this ServiceComponent.  # noqa: E501


        :return: The external_references of this ServiceComponent.  # noqa: E501
        :rtype: list[ExternalReference]
        """
        return self._external_references

    @external_references.setter
    def external_references(self, external_references):
        """Sets the external_references of this ServiceComponent.


        :param external_references: The external_references of this ServiceComponent.  # noqa: E501
        :type: list[ExternalReference]
        """

        self._external_references = external_references

    @property
    def parent(self):
        """Gets the parent of this ServiceComponent.  # noqa: E501


        :return: The parent of this ServiceComponent.  # noqa: E501
        :rtype: ServiceComponent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ServiceComponent.


        :param parent: The parent of this ServiceComponent.  # noqa: E501
        :type: ServiceComponent
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this ServiceComponent.  # noqa: E501


        :return: The children of this ServiceComponent.  # noqa: E501
        :rtype: list[ServiceComponent]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ServiceComponent.


        :param children: The children of this ServiceComponent.  # noqa: E501
        :type: list[ServiceComponent]
        """

        self._children = children

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this ServiceComponent.  # noqa: E501


        :return: The vulnerabilities of this ServiceComponent.  # noqa: E501
        :rtype: list[Vulnerability]
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this ServiceComponent.


        :param vulnerabilities: The vulnerabilities of this ServiceComponent.  # noqa: E501
        :type: list[Vulnerability]
        """

        self._vulnerabilities = vulnerabilities

    @property
    def project(self):
        """Gets the project of this ServiceComponent.  # noqa: E501


        :return: The project of this ServiceComponent.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ServiceComponent.


        :param project: The project of this ServiceComponent.  # noqa: E501
        :type: Project
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def last_inherited_risk_score(self):
        """Gets the last_inherited_risk_score of this ServiceComponent.  # noqa: E501


        :return: The last_inherited_risk_score of this ServiceComponent.  # noqa: E501
        :rtype: float
        """
        return self._last_inherited_risk_score

    @last_inherited_risk_score.setter
    def last_inherited_risk_score(self, last_inherited_risk_score):
        """Sets the last_inherited_risk_score of this ServiceComponent.


        :param last_inherited_risk_score: The last_inherited_risk_score of this ServiceComponent.  # noqa: E501
        :type: float
        """

        self._last_inherited_risk_score = last_inherited_risk_score

    @property
    def notes(self):
        """Gets the notes of this ServiceComponent.  # noqa: E501


        :return: The notes of this ServiceComponent.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ServiceComponent.


        :param notes: The notes of this ServiceComponent.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def uuid(self):
        """Gets the uuid of this ServiceComponent.  # noqa: E501


        :return: The uuid of this ServiceComponent.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ServiceComponent.


        :param uuid: The uuid of this ServiceComponent.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def bom_ref(self):
        """Gets the bom_ref of this ServiceComponent.  # noqa: E501


        :return: The bom_ref of this ServiceComponent.  # noqa: E501
        :rtype: str
        """
        return self._bom_ref

    @bom_ref.setter
    def bom_ref(self, bom_ref):
        """Sets the bom_ref of this ServiceComponent.


        :param bom_ref: The bom_ref of this ServiceComponent.  # noqa: E501
        :type: str
        """

        self._bom_ref = bom_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
