# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyViolation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'project': 'Project',
        'component': 'Component',
        'policy_condition': 'PolicyCondition',
        'timestamp': 'int',
        'text': 'str',
        'analysis': 'ViolationAnalysis',
        'uuid': 'str'
    }

    attribute_map = {
        'type': 'type',
        'project': 'project',
        'component': 'component',
        'policy_condition': 'policyCondition',
        'timestamp': 'timestamp',
        'text': 'text',
        'analysis': 'analysis',
        'uuid': 'uuid'
    }

    def __init__(self, type=None, project=None, component=None, policy_condition=None, timestamp=None, text=None, analysis=None, uuid=None):  # noqa: E501
        """PolicyViolation - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._project = None
        self._component = None
        self._policy_condition = None
        self._timestamp = None
        self._text = None
        self._analysis = None
        self._uuid = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if project is not None:
            self.project = project
        if component is not None:
            self.component = component
        if policy_condition is not None:
            self.policy_condition = policy_condition
        self.timestamp = timestamp
        if text is not None:
            self.text = text
        if analysis is not None:
            self.analysis = analysis
        self.uuid = uuid

    @property
    def type(self):
        """Gets the type of this PolicyViolation.  # noqa: E501


        :return: The type of this PolicyViolation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolicyViolation.


        :param type: The type of this PolicyViolation.  # noqa: E501
        :type: str
        """
        allowed_values = ["LICENSE", "SECURITY", "OPERATIONAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def project(self):
        """Gets the project of this PolicyViolation.  # noqa: E501


        :return: The project of this PolicyViolation.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this PolicyViolation.


        :param project: The project of this PolicyViolation.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def component(self):
        """Gets the component of this PolicyViolation.  # noqa: E501


        :return: The component of this PolicyViolation.  # noqa: E501
        :rtype: Component
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this PolicyViolation.


        :param component: The component of this PolicyViolation.  # noqa: E501
        :type: Component
        """

        self._component = component

    @property
    def policy_condition(self):
        """Gets the policy_condition of this PolicyViolation.  # noqa: E501


        :return: The policy_condition of this PolicyViolation.  # noqa: E501
        :rtype: PolicyCondition
        """
        return self._policy_condition

    @policy_condition.setter
    def policy_condition(self, policy_condition):
        """Sets the policy_condition of this PolicyViolation.


        :param policy_condition: The policy_condition of this PolicyViolation.  # noqa: E501
        :type: PolicyCondition
        """

        self._policy_condition = policy_condition

    @property
    def timestamp(self):
        """Gets the timestamp of this PolicyViolation.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The timestamp of this PolicyViolation.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PolicyViolation.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param timestamp: The timestamp of this PolicyViolation.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def text(self):
        """Gets the text of this PolicyViolation.  # noqa: E501


        :return: The text of this PolicyViolation.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PolicyViolation.


        :param text: The text of this PolicyViolation.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def analysis(self):
        """Gets the analysis of this PolicyViolation.  # noqa: E501


        :return: The analysis of this PolicyViolation.  # noqa: E501
        :rtype: ViolationAnalysis
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this PolicyViolation.


        :param analysis: The analysis of this PolicyViolation.  # noqa: E501
        :type: ViolationAnalysis
        """

        self._analysis = analysis

    @property
    def uuid(self):
        """Gets the uuid of this PolicyViolation.  # noqa: E501


        :return: The uuid of this PolicyViolation.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PolicyViolation.


        :param uuid: The uuid of this PolicyViolation.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyViolation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyViolation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
