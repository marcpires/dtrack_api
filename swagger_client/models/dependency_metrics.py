# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DependencyMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'critical': 'int',
        'high': 'int',
        'medium': 'int',
        'low': 'int',
        'unassigned': 'int',
        'vulnerabilities': 'int',
        'suppressed': 'int',
        'findings_total': 'int',
        'findings_audited': 'int',
        'findings_unaudited': 'int',
        'inherited_risk_score': 'float',
        'policy_violations_fail': 'int',
        'policy_violations_warn': 'int',
        'policy_violations_info': 'int',
        'policy_violations_total': 'int',
        'policy_violations_audited': 'int',
        'policy_violations_unaudited': 'int',
        'policy_violations_security_total': 'int',
        'policy_violations_security_audited': 'int',
        'policy_violations_security_unaudited': 'int',
        'policy_violations_license_total': 'int',
        'policy_violations_license_audited': 'int',
        'policy_violations_license_unaudited': 'int',
        'policy_violations_operational_total': 'int',
        'policy_violations_operational_audited': 'int',
        'policy_violations_operational_unaudited': 'int',
        'first_occurrence': 'int',
        'last_occurrence': 'int'
    }

    attribute_map = {
        'critical': 'critical',
        'high': 'high',
        'medium': 'medium',
        'low': 'low',
        'unassigned': 'unassigned',
        'vulnerabilities': 'vulnerabilities',
        'suppressed': 'suppressed',
        'findings_total': 'findingsTotal',
        'findings_audited': 'findingsAudited',
        'findings_unaudited': 'findingsUnaudited',
        'inherited_risk_score': 'inheritedRiskScore',
        'policy_violations_fail': 'policyViolationsFail',
        'policy_violations_warn': 'policyViolationsWarn',
        'policy_violations_info': 'policyViolationsInfo',
        'policy_violations_total': 'policyViolationsTotal',
        'policy_violations_audited': 'policyViolationsAudited',
        'policy_violations_unaudited': 'policyViolationsUnaudited',
        'policy_violations_security_total': 'policyViolationsSecurityTotal',
        'policy_violations_security_audited': 'policyViolationsSecurityAudited',
        'policy_violations_security_unaudited': 'policyViolationsSecurityUnaudited',
        'policy_violations_license_total': 'policyViolationsLicenseTotal',
        'policy_violations_license_audited': 'policyViolationsLicenseAudited',
        'policy_violations_license_unaudited': 'policyViolationsLicenseUnaudited',
        'policy_violations_operational_total': 'policyViolationsOperationalTotal',
        'policy_violations_operational_audited': 'policyViolationsOperationalAudited',
        'policy_violations_operational_unaudited': 'policyViolationsOperationalUnaudited',
        'first_occurrence': 'firstOccurrence',
        'last_occurrence': 'lastOccurrence'
    }

    def __init__(self, critical=None, high=None, medium=None, low=None, unassigned=None, vulnerabilities=None, suppressed=None, findings_total=None, findings_audited=None, findings_unaudited=None, inherited_risk_score=None, policy_violations_fail=None, policy_violations_warn=None, policy_violations_info=None, policy_violations_total=None, policy_violations_audited=None, policy_violations_unaudited=None, policy_violations_security_total=None, policy_violations_security_audited=None, policy_violations_security_unaudited=None, policy_violations_license_total=None, policy_violations_license_audited=None, policy_violations_license_unaudited=None, policy_violations_operational_total=None, policy_violations_operational_audited=None, policy_violations_operational_unaudited=None, first_occurrence=None, last_occurrence=None):  # noqa: E501
        """DependencyMetrics - a model defined in Swagger"""  # noqa: E501
        self._critical = None
        self._high = None
        self._medium = None
        self._low = None
        self._unassigned = None
        self._vulnerabilities = None
        self._suppressed = None
        self._findings_total = None
        self._findings_audited = None
        self._findings_unaudited = None
        self._inherited_risk_score = None
        self._policy_violations_fail = None
        self._policy_violations_warn = None
        self._policy_violations_info = None
        self._policy_violations_total = None
        self._policy_violations_audited = None
        self._policy_violations_unaudited = None
        self._policy_violations_security_total = None
        self._policy_violations_security_audited = None
        self._policy_violations_security_unaudited = None
        self._policy_violations_license_total = None
        self._policy_violations_license_audited = None
        self._policy_violations_license_unaudited = None
        self._policy_violations_operational_total = None
        self._policy_violations_operational_audited = None
        self._policy_violations_operational_unaudited = None
        self._first_occurrence = None
        self._last_occurrence = None
        self.discriminator = None
        self.critical = critical
        self.high = high
        self.medium = medium
        self.low = low
        if unassigned is not None:
            self.unassigned = unassigned
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities
        if suppressed is not None:
            self.suppressed = suppressed
        if findings_total is not None:
            self.findings_total = findings_total
        if findings_audited is not None:
            self.findings_audited = findings_audited
        if findings_unaudited is not None:
            self.findings_unaudited = findings_unaudited
        if inherited_risk_score is not None:
            self.inherited_risk_score = inherited_risk_score
        if policy_violations_fail is not None:
            self.policy_violations_fail = policy_violations_fail
        if policy_violations_warn is not None:
            self.policy_violations_warn = policy_violations_warn
        if policy_violations_info is not None:
            self.policy_violations_info = policy_violations_info
        if policy_violations_total is not None:
            self.policy_violations_total = policy_violations_total
        if policy_violations_audited is not None:
            self.policy_violations_audited = policy_violations_audited
        if policy_violations_unaudited is not None:
            self.policy_violations_unaudited = policy_violations_unaudited
        if policy_violations_security_total is not None:
            self.policy_violations_security_total = policy_violations_security_total
        if policy_violations_security_audited is not None:
            self.policy_violations_security_audited = policy_violations_security_audited
        if policy_violations_security_unaudited is not None:
            self.policy_violations_security_unaudited = policy_violations_security_unaudited
        if policy_violations_license_total is not None:
            self.policy_violations_license_total = policy_violations_license_total
        if policy_violations_license_audited is not None:
            self.policy_violations_license_audited = policy_violations_license_audited
        if policy_violations_license_unaudited is not None:
            self.policy_violations_license_unaudited = policy_violations_license_unaudited
        if policy_violations_operational_total is not None:
            self.policy_violations_operational_total = policy_violations_operational_total
        if policy_violations_operational_audited is not None:
            self.policy_violations_operational_audited = policy_violations_operational_audited
        if policy_violations_operational_unaudited is not None:
            self.policy_violations_operational_unaudited = policy_violations_operational_unaudited
        self.first_occurrence = first_occurrence
        self.last_occurrence = last_occurrence

    @property
    def critical(self):
        """Gets the critical of this DependencyMetrics.  # noqa: E501


        :return: The critical of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this DependencyMetrics.


        :param critical: The critical of this DependencyMetrics.  # noqa: E501
        :type: int
        """
        if critical is None:
            raise ValueError("Invalid value for `critical`, must not be `None`")  # noqa: E501

        self._critical = critical

    @property
    def high(self):
        """Gets the high of this DependencyMetrics.  # noqa: E501


        :return: The high of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this DependencyMetrics.


        :param high: The high of this DependencyMetrics.  # noqa: E501
        :type: int
        """
        if high is None:
            raise ValueError("Invalid value for `high`, must not be `None`")  # noqa: E501

        self._high = high

    @property
    def medium(self):
        """Gets the medium of this DependencyMetrics.  # noqa: E501


        :return: The medium of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this DependencyMetrics.


        :param medium: The medium of this DependencyMetrics.  # noqa: E501
        :type: int
        """
        if medium is None:
            raise ValueError("Invalid value for `medium`, must not be `None`")  # noqa: E501

        self._medium = medium

    @property
    def low(self):
        """Gets the low of this DependencyMetrics.  # noqa: E501


        :return: The low of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this DependencyMetrics.


        :param low: The low of this DependencyMetrics.  # noqa: E501
        :type: int
        """
        if low is None:
            raise ValueError("Invalid value for `low`, must not be `None`")  # noqa: E501

        self._low = low

    @property
    def unassigned(self):
        """Gets the unassigned of this DependencyMetrics.  # noqa: E501


        :return: The unassigned of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._unassigned

    @unassigned.setter
    def unassigned(self, unassigned):
        """Sets the unassigned of this DependencyMetrics.


        :param unassigned: The unassigned of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._unassigned = unassigned

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this DependencyMetrics.  # noqa: E501


        :return: The vulnerabilities of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this DependencyMetrics.


        :param vulnerabilities: The vulnerabilities of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._vulnerabilities = vulnerabilities

    @property
    def suppressed(self):
        """Gets the suppressed of this DependencyMetrics.  # noqa: E501


        :return: The suppressed of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this DependencyMetrics.


        :param suppressed: The suppressed of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._suppressed = suppressed

    @property
    def findings_total(self):
        """Gets the findings_total of this DependencyMetrics.  # noqa: E501


        :return: The findings_total of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._findings_total

    @findings_total.setter
    def findings_total(self, findings_total):
        """Sets the findings_total of this DependencyMetrics.


        :param findings_total: The findings_total of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._findings_total = findings_total

    @property
    def findings_audited(self):
        """Gets the findings_audited of this DependencyMetrics.  # noqa: E501


        :return: The findings_audited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._findings_audited

    @findings_audited.setter
    def findings_audited(self, findings_audited):
        """Sets the findings_audited of this DependencyMetrics.


        :param findings_audited: The findings_audited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._findings_audited = findings_audited

    @property
    def findings_unaudited(self):
        """Gets the findings_unaudited of this DependencyMetrics.  # noqa: E501


        :return: The findings_unaudited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._findings_unaudited

    @findings_unaudited.setter
    def findings_unaudited(self, findings_unaudited):
        """Sets the findings_unaudited of this DependencyMetrics.


        :param findings_unaudited: The findings_unaudited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._findings_unaudited = findings_unaudited

    @property
    def inherited_risk_score(self):
        """Gets the inherited_risk_score of this DependencyMetrics.  # noqa: E501


        :return: The inherited_risk_score of this DependencyMetrics.  # noqa: E501
        :rtype: float
        """
        return self._inherited_risk_score

    @inherited_risk_score.setter
    def inherited_risk_score(self, inherited_risk_score):
        """Sets the inherited_risk_score of this DependencyMetrics.


        :param inherited_risk_score: The inherited_risk_score of this DependencyMetrics.  # noqa: E501
        :type: float
        """

        self._inherited_risk_score = inherited_risk_score

    @property
    def policy_violations_fail(self):
        """Gets the policy_violations_fail of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_fail of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_fail

    @policy_violations_fail.setter
    def policy_violations_fail(self, policy_violations_fail):
        """Sets the policy_violations_fail of this DependencyMetrics.


        :param policy_violations_fail: The policy_violations_fail of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_fail = policy_violations_fail

    @property
    def policy_violations_warn(self):
        """Gets the policy_violations_warn of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_warn of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_warn

    @policy_violations_warn.setter
    def policy_violations_warn(self, policy_violations_warn):
        """Sets the policy_violations_warn of this DependencyMetrics.


        :param policy_violations_warn: The policy_violations_warn of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_warn = policy_violations_warn

    @property
    def policy_violations_info(self):
        """Gets the policy_violations_info of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_info of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_info

    @policy_violations_info.setter
    def policy_violations_info(self, policy_violations_info):
        """Sets the policy_violations_info of this DependencyMetrics.


        :param policy_violations_info: The policy_violations_info of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_info = policy_violations_info

    @property
    def policy_violations_total(self):
        """Gets the policy_violations_total of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_total of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_total

    @policy_violations_total.setter
    def policy_violations_total(self, policy_violations_total):
        """Sets the policy_violations_total of this DependencyMetrics.


        :param policy_violations_total: The policy_violations_total of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_total = policy_violations_total

    @property
    def policy_violations_audited(self):
        """Gets the policy_violations_audited of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_audited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_audited

    @policy_violations_audited.setter
    def policy_violations_audited(self, policy_violations_audited):
        """Sets the policy_violations_audited of this DependencyMetrics.


        :param policy_violations_audited: The policy_violations_audited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_audited = policy_violations_audited

    @property
    def policy_violations_unaudited(self):
        """Gets the policy_violations_unaudited of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_unaudited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_unaudited

    @policy_violations_unaudited.setter
    def policy_violations_unaudited(self, policy_violations_unaudited):
        """Sets the policy_violations_unaudited of this DependencyMetrics.


        :param policy_violations_unaudited: The policy_violations_unaudited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_unaudited = policy_violations_unaudited

    @property
    def policy_violations_security_total(self):
        """Gets the policy_violations_security_total of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_security_total of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_security_total

    @policy_violations_security_total.setter
    def policy_violations_security_total(self, policy_violations_security_total):
        """Sets the policy_violations_security_total of this DependencyMetrics.


        :param policy_violations_security_total: The policy_violations_security_total of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_security_total = policy_violations_security_total

    @property
    def policy_violations_security_audited(self):
        """Gets the policy_violations_security_audited of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_security_audited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_security_audited

    @policy_violations_security_audited.setter
    def policy_violations_security_audited(self, policy_violations_security_audited):
        """Sets the policy_violations_security_audited of this DependencyMetrics.


        :param policy_violations_security_audited: The policy_violations_security_audited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_security_audited = policy_violations_security_audited

    @property
    def policy_violations_security_unaudited(self):
        """Gets the policy_violations_security_unaudited of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_security_unaudited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_security_unaudited

    @policy_violations_security_unaudited.setter
    def policy_violations_security_unaudited(self, policy_violations_security_unaudited):
        """Sets the policy_violations_security_unaudited of this DependencyMetrics.


        :param policy_violations_security_unaudited: The policy_violations_security_unaudited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_security_unaudited = policy_violations_security_unaudited

    @property
    def policy_violations_license_total(self):
        """Gets the policy_violations_license_total of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_license_total of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_license_total

    @policy_violations_license_total.setter
    def policy_violations_license_total(self, policy_violations_license_total):
        """Sets the policy_violations_license_total of this DependencyMetrics.


        :param policy_violations_license_total: The policy_violations_license_total of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_license_total = policy_violations_license_total

    @property
    def policy_violations_license_audited(self):
        """Gets the policy_violations_license_audited of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_license_audited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_license_audited

    @policy_violations_license_audited.setter
    def policy_violations_license_audited(self, policy_violations_license_audited):
        """Sets the policy_violations_license_audited of this DependencyMetrics.


        :param policy_violations_license_audited: The policy_violations_license_audited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_license_audited = policy_violations_license_audited

    @property
    def policy_violations_license_unaudited(self):
        """Gets the policy_violations_license_unaudited of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_license_unaudited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_license_unaudited

    @policy_violations_license_unaudited.setter
    def policy_violations_license_unaudited(self, policy_violations_license_unaudited):
        """Sets the policy_violations_license_unaudited of this DependencyMetrics.


        :param policy_violations_license_unaudited: The policy_violations_license_unaudited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_license_unaudited = policy_violations_license_unaudited

    @property
    def policy_violations_operational_total(self):
        """Gets the policy_violations_operational_total of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_operational_total of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_operational_total

    @policy_violations_operational_total.setter
    def policy_violations_operational_total(self, policy_violations_operational_total):
        """Sets the policy_violations_operational_total of this DependencyMetrics.


        :param policy_violations_operational_total: The policy_violations_operational_total of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_operational_total = policy_violations_operational_total

    @property
    def policy_violations_operational_audited(self):
        """Gets the policy_violations_operational_audited of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_operational_audited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_operational_audited

    @policy_violations_operational_audited.setter
    def policy_violations_operational_audited(self, policy_violations_operational_audited):
        """Sets the policy_violations_operational_audited of this DependencyMetrics.


        :param policy_violations_operational_audited: The policy_violations_operational_audited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_operational_audited = policy_violations_operational_audited

    @property
    def policy_violations_operational_unaudited(self):
        """Gets the policy_violations_operational_unaudited of this DependencyMetrics.  # noqa: E501


        :return: The policy_violations_operational_unaudited of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._policy_violations_operational_unaudited

    @policy_violations_operational_unaudited.setter
    def policy_violations_operational_unaudited(self, policy_violations_operational_unaudited):
        """Sets the policy_violations_operational_unaudited of this DependencyMetrics.


        :param policy_violations_operational_unaudited: The policy_violations_operational_unaudited of this DependencyMetrics.  # noqa: E501
        :type: int
        """

        self._policy_violations_operational_unaudited = policy_violations_operational_unaudited

    @property
    def first_occurrence(self):
        """Gets the first_occurrence of this DependencyMetrics.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The first_occurrence of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._first_occurrence

    @first_occurrence.setter
    def first_occurrence(self, first_occurrence):
        """Sets the first_occurrence of this DependencyMetrics.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param first_occurrence: The first_occurrence of this DependencyMetrics.  # noqa: E501
        :type: int
        """
        if first_occurrence is None:
            raise ValueError("Invalid value for `first_occurrence`, must not be `None`")  # noqa: E501

        self._first_occurrence = first_occurrence

    @property
    def last_occurrence(self):
        """Gets the last_occurrence of this DependencyMetrics.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The last_occurrence of this DependencyMetrics.  # noqa: E501
        :rtype: int
        """
        return self._last_occurrence

    @last_occurrence.setter
    def last_occurrence(self, last_occurrence):
        """Sets the last_occurrence of this DependencyMetrics.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param last_occurrence: The last_occurrence of this DependencyMetrics.  # noqa: E501
        :type: int
        """
        if last_occurrence is None:
            raise ValueError("Invalid value for `last_occurrence`, must not be `None`")  # noqa: E501

        self._last_occurrence = last_occurrence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DependencyMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DependencyMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
