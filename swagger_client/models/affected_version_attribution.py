# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AffectedVersionAttribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_seen': 'int',
        'last_seen': 'int',
        'source': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'first_seen': 'firstSeen',
        'last_seen': 'lastSeen',
        'source': 'source',
        'uuid': 'uuid'
    }

    def __init__(self, first_seen=None, last_seen=None, source=None, uuid=None):  # noqa: E501
        """AffectedVersionAttribution - a model defined in Swagger"""  # noqa: E501
        self._first_seen = None
        self._last_seen = None
        self._source = None
        self._uuid = None
        self.discriminator = None
        self.first_seen = first_seen
        self.last_seen = last_seen
        if source is not None:
            self.source = source
        if uuid is not None:
            self.uuid = uuid

    @property
    def first_seen(self):
        """Gets the first_seen of this AffectedVersionAttribution.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The first_seen of this AffectedVersionAttribution.  # noqa: E501
        :rtype: int
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this AffectedVersionAttribution.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param first_seen: The first_seen of this AffectedVersionAttribution.  # noqa: E501
        :type: int
        """
        if first_seen is None:
            raise ValueError("Invalid value for `first_seen`, must not be `None`")  # noqa: E501

        self._first_seen = first_seen

    @property
    def last_seen(self):
        """Gets the last_seen of this AffectedVersionAttribution.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The last_seen of this AffectedVersionAttribution.  # noqa: E501
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this AffectedVersionAttribution.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param last_seen: The last_seen of this AffectedVersionAttribution.  # noqa: E501
        :type: int
        """
        if last_seen is None:
            raise ValueError("Invalid value for `last_seen`, must not be `None`")  # noqa: E501

        self._last_seen = last_seen

    @property
    def source(self):
        """Gets the source of this AffectedVersionAttribution.  # noqa: E501


        :return: The source of this AffectedVersionAttribution.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AffectedVersionAttribution.


        :param source: The source of this AffectedVersionAttribution.  # noqa: E501
        :type: str
        """
        allowed_values = ["NVD", "NPM", "GITHUB", "VULNDB", "OSSINDEX", "RETIREJS", "INTERNAL", "OSV", "SNYK", "TRIVY", "UNKNOWN"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def uuid(self):
        """Gets the uuid of this AffectedVersionAttribution.  # noqa: E501


        :return: The uuid of this AffectedVersionAttribution.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AffectedVersionAttribution.


        :param uuid: The uuid of this AffectedVersionAttribution.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AffectedVersionAttribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AffectedVersionAttribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
