# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Policy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'operator': 'str',
        'violation_state': 'str',
        'policy_conditions': 'list[PolicyCondition]',
        'projects': 'list[Project]',
        'tags': 'list[Tag]',
        'uuid': 'str',
        'include_children': 'bool',
        'only_latest_project_version': 'bool',
        '_global': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'operator': 'operator',
        'violation_state': 'violationState',
        'policy_conditions': 'policyConditions',
        'projects': 'projects',
        'tags': 'tags',
        'uuid': 'uuid',
        'include_children': 'includeChildren',
        'only_latest_project_version': 'onlyLatestProjectVersion',
        '_global': 'global'
    }

    def __init__(self, name=None, operator=None, violation_state=None, policy_conditions=None, projects=None, tags=None, uuid=None, include_children=None, only_latest_project_version=None, _global=None):  # noqa: E501
        """Policy - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._operator = None
        self._violation_state = None
        self._policy_conditions = None
        self._projects = None
        self._tags = None
        self._uuid = None
        self._include_children = None
        self._only_latest_project_version = None
        self.__global = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if operator is not None:
            self.operator = operator
        if violation_state is not None:
            self.violation_state = violation_state
        if policy_conditions is not None:
            self.policy_conditions = policy_conditions
        if projects is not None:
            self.projects = projects
        if tags is not None:
            self.tags = tags
        self.uuid = uuid
        if include_children is not None:
            self.include_children = include_children
        if only_latest_project_version is not None:
            self.only_latest_project_version = only_latest_project_version
        if _global is not None:
            self._global = _global

    @property
    def name(self):
        """Gets the name of this Policy.  # noqa: E501


        :return: The name of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Policy.


        :param name: The name of this Policy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operator(self):
        """Gets the operator of this Policy.  # noqa: E501


        :return: The operator of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Policy.


        :param operator: The operator of this Policy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "ANY"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def violation_state(self):
        """Gets the violation_state of this Policy.  # noqa: E501


        :return: The violation_state of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._violation_state

    @violation_state.setter
    def violation_state(self, violation_state):
        """Sets the violation_state of this Policy.


        :param violation_state: The violation_state of this Policy.  # noqa: E501
        :type: str
        """
        allowed_values = ["INFO", "WARN", "FAIL"]  # noqa: E501
        if violation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `violation_state` ({0}), must be one of {1}"  # noqa: E501
                .format(violation_state, allowed_values)
            )

        self._violation_state = violation_state

    @property
    def policy_conditions(self):
        """Gets the policy_conditions of this Policy.  # noqa: E501


        :return: The policy_conditions of this Policy.  # noqa: E501
        :rtype: list[PolicyCondition]
        """
        return self._policy_conditions

    @policy_conditions.setter
    def policy_conditions(self, policy_conditions):
        """Sets the policy_conditions of this Policy.


        :param policy_conditions: The policy_conditions of this Policy.  # noqa: E501
        :type: list[PolicyCondition]
        """

        self._policy_conditions = policy_conditions

    @property
    def projects(self):
        """Gets the projects of this Policy.  # noqa: E501


        :return: The projects of this Policy.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Policy.


        :param projects: The projects of this Policy.  # noqa: E501
        :type: list[Project]
        """

        self._projects = projects

    @property
    def tags(self):
        """Gets the tags of this Policy.  # noqa: E501


        :return: The tags of this Policy.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Policy.


        :param tags: The tags of this Policy.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def uuid(self):
        """Gets the uuid of this Policy.  # noqa: E501


        :return: The uuid of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Policy.


        :param uuid: The uuid of this Policy.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def include_children(self):
        """Gets the include_children of this Policy.  # noqa: E501


        :return: The include_children of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._include_children

    @include_children.setter
    def include_children(self, include_children):
        """Sets the include_children of this Policy.


        :param include_children: The include_children of this Policy.  # noqa: E501
        :type: bool
        """

        self._include_children = include_children

    @property
    def only_latest_project_version(self):
        """Gets the only_latest_project_version of this Policy.  # noqa: E501


        :return: The only_latest_project_version of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self._only_latest_project_version

    @only_latest_project_version.setter
    def only_latest_project_version(self, only_latest_project_version):
        """Sets the only_latest_project_version of this Policy.


        :param only_latest_project_version: The only_latest_project_version of this Policy.  # noqa: E501
        :type: bool
        """

        self._only_latest_project_version = only_latest_project_version

    @property
    def _global(self):
        """Gets the _global of this Policy.  # noqa: E501


        :return: The _global of this Policy.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this Policy.


        :param _global: The _global of this Policy.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Policy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
