# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FindingAttribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributed_on': 'int',
        'analyzer_identity': 'str',
        'component': 'Component',
        'vulnerability': 'Vulnerability',
        'alternate_identifier': 'str',
        'reference_url': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'attributed_on': 'attributedOn',
        'analyzer_identity': 'analyzerIdentity',
        'component': 'component',
        'vulnerability': 'vulnerability',
        'alternate_identifier': 'alternateIdentifier',
        'reference_url': 'referenceUrl',
        'uuid': 'uuid'
    }

    def __init__(self, attributed_on=None, analyzer_identity=None, component=None, vulnerability=None, alternate_identifier=None, reference_url=None, uuid=None):  # noqa: E501
        """FindingAttribution - a model defined in Swagger"""  # noqa: E501
        self._attributed_on = None
        self._analyzer_identity = None
        self._component = None
        self._vulnerability = None
        self._alternate_identifier = None
        self._reference_url = None
        self._uuid = None
        self.discriminator = None
        self.attributed_on = attributed_on
        if analyzer_identity is not None:
            self.analyzer_identity = analyzer_identity
        self.component = component
        self.vulnerability = vulnerability
        if alternate_identifier is not None:
            self.alternate_identifier = alternate_identifier
        if reference_url is not None:
            self.reference_url = reference_url
        self.uuid = uuid

    @property
    def attributed_on(self):
        """Gets the attributed_on of this FindingAttribution.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The attributed_on of this FindingAttribution.  # noqa: E501
        :rtype: int
        """
        return self._attributed_on

    @attributed_on.setter
    def attributed_on(self, attributed_on):
        """Sets the attributed_on of this FindingAttribution.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param attributed_on: The attributed_on of this FindingAttribution.  # noqa: E501
        :type: int
        """
        if attributed_on is None:
            raise ValueError("Invalid value for `attributed_on`, must not be `None`")  # noqa: E501

        self._attributed_on = attributed_on

    @property
    def analyzer_identity(self):
        """Gets the analyzer_identity of this FindingAttribution.  # noqa: E501


        :return: The analyzer_identity of this FindingAttribution.  # noqa: E501
        :rtype: str
        """
        return self._analyzer_identity

    @analyzer_identity.setter
    def analyzer_identity(self, analyzer_identity):
        """Sets the analyzer_identity of this FindingAttribution.


        :param analyzer_identity: The analyzer_identity of this FindingAttribution.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERNAL_ANALYZER", "OSSINDEX_ANALYZER", "NPM_AUDIT_ANALYZER", "VULNDB_ANALYZER", "SNYK_ANALYZER", "TRIVY_ANALYZER", "NONE"]  # noqa: E501
        if analyzer_identity not in allowed_values:
            raise ValueError(
                "Invalid value for `analyzer_identity` ({0}), must be one of {1}"  # noqa: E501
                .format(analyzer_identity, allowed_values)
            )

        self._analyzer_identity = analyzer_identity

    @property
    def component(self):
        """Gets the component of this FindingAttribution.  # noqa: E501


        :return: The component of this FindingAttribution.  # noqa: E501
        :rtype: Component
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this FindingAttribution.


        :param component: The component of this FindingAttribution.  # noqa: E501
        :type: Component
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")  # noqa: E501

        self._component = component

    @property
    def vulnerability(self):
        """Gets the vulnerability of this FindingAttribution.  # noqa: E501


        :return: The vulnerability of this FindingAttribution.  # noqa: E501
        :rtype: Vulnerability
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this FindingAttribution.


        :param vulnerability: The vulnerability of this FindingAttribution.  # noqa: E501
        :type: Vulnerability
        """
        if vulnerability is None:
            raise ValueError("Invalid value for `vulnerability`, must not be `None`")  # noqa: E501

        self._vulnerability = vulnerability

    @property
    def alternate_identifier(self):
        """Gets the alternate_identifier of this FindingAttribution.  # noqa: E501


        :return: The alternate_identifier of this FindingAttribution.  # noqa: E501
        :rtype: str
        """
        return self._alternate_identifier

    @alternate_identifier.setter
    def alternate_identifier(self, alternate_identifier):
        """Sets the alternate_identifier of this FindingAttribution.


        :param alternate_identifier: The alternate_identifier of this FindingAttribution.  # noqa: E501
        :type: str
        """

        self._alternate_identifier = alternate_identifier

    @property
    def reference_url(self):
        """Gets the reference_url of this FindingAttribution.  # noqa: E501


        :return: The reference_url of this FindingAttribution.  # noqa: E501
        :rtype: str
        """
        return self._reference_url

    @reference_url.setter
    def reference_url(self, reference_url):
        """Sets the reference_url of this FindingAttribution.


        :param reference_url: The reference_url of this FindingAttribution.  # noqa: E501
        :type: str
        """

        self._reference_url = reference_url

    @property
    def uuid(self):
        """Gets the uuid of this FindingAttribution.  # noqa: E501


        :return: The uuid of this FindingAttribution.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this FindingAttribution.


        :param uuid: The uuid of this FindingAttribution.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FindingAttribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingAttribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
