# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VulnerabilityAlias(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_id': 'str',
        'cve_id': 'str',
        'ghsa_id': 'str',
        'sonatype_id': 'str',
        'osv_id': 'str',
        'snyk_id': 'str',
        'gsd_id': 'str',
        'vuln_db_id': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'internal_id': 'internalId',
        'cve_id': 'cveId',
        'ghsa_id': 'ghsaId',
        'sonatype_id': 'sonatypeId',
        'osv_id': 'osvId',
        'snyk_id': 'snykId',
        'gsd_id': 'gsdId',
        'vuln_db_id': 'vulnDbId',
        'uuid': 'uuid'
    }

    def __init__(self, internal_id=None, cve_id=None, ghsa_id=None, sonatype_id=None, osv_id=None, snyk_id=None, gsd_id=None, vuln_db_id=None, uuid=None):  # noqa: E501
        """VulnerabilityAlias - a model defined in Swagger"""  # noqa: E501
        self._internal_id = None
        self._cve_id = None
        self._ghsa_id = None
        self._sonatype_id = None
        self._osv_id = None
        self._snyk_id = None
        self._gsd_id = None
        self._vuln_db_id = None
        self._uuid = None
        self.discriminator = None
        if internal_id is not None:
            self.internal_id = internal_id
        if cve_id is not None:
            self.cve_id = cve_id
        if ghsa_id is not None:
            self.ghsa_id = ghsa_id
        if sonatype_id is not None:
            self.sonatype_id = sonatype_id
        if osv_id is not None:
            self.osv_id = osv_id
        if snyk_id is not None:
            self.snyk_id = snyk_id
        if gsd_id is not None:
            self.gsd_id = gsd_id
        if vuln_db_id is not None:
            self.vuln_db_id = vuln_db_id
        self.uuid = uuid

    @property
    def internal_id(self):
        """Gets the internal_id of this VulnerabilityAlias.  # noqa: E501


        :return: The internal_id of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this VulnerabilityAlias.


        :param internal_id: The internal_id of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """

        self._internal_id = internal_id

    @property
    def cve_id(self):
        """Gets the cve_id of this VulnerabilityAlias.  # noqa: E501


        :return: The cve_id of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._cve_id

    @cve_id.setter
    def cve_id(self, cve_id):
        """Sets the cve_id of this VulnerabilityAlias.


        :param cve_id: The cve_id of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """

        self._cve_id = cve_id

    @property
    def ghsa_id(self):
        """Gets the ghsa_id of this VulnerabilityAlias.  # noqa: E501


        :return: The ghsa_id of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._ghsa_id

    @ghsa_id.setter
    def ghsa_id(self, ghsa_id):
        """Sets the ghsa_id of this VulnerabilityAlias.


        :param ghsa_id: The ghsa_id of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """

        self._ghsa_id = ghsa_id

    @property
    def sonatype_id(self):
        """Gets the sonatype_id of this VulnerabilityAlias.  # noqa: E501


        :return: The sonatype_id of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._sonatype_id

    @sonatype_id.setter
    def sonatype_id(self, sonatype_id):
        """Sets the sonatype_id of this VulnerabilityAlias.


        :param sonatype_id: The sonatype_id of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """

        self._sonatype_id = sonatype_id

    @property
    def osv_id(self):
        """Gets the osv_id of this VulnerabilityAlias.  # noqa: E501


        :return: The osv_id of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._osv_id

    @osv_id.setter
    def osv_id(self, osv_id):
        """Sets the osv_id of this VulnerabilityAlias.


        :param osv_id: The osv_id of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """

        self._osv_id = osv_id

    @property
    def snyk_id(self):
        """Gets the snyk_id of this VulnerabilityAlias.  # noqa: E501


        :return: The snyk_id of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._snyk_id

    @snyk_id.setter
    def snyk_id(self, snyk_id):
        """Sets the snyk_id of this VulnerabilityAlias.


        :param snyk_id: The snyk_id of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """

        self._snyk_id = snyk_id

    @property
    def gsd_id(self):
        """Gets the gsd_id of this VulnerabilityAlias.  # noqa: E501


        :return: The gsd_id of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._gsd_id

    @gsd_id.setter
    def gsd_id(self, gsd_id):
        """Sets the gsd_id of this VulnerabilityAlias.


        :param gsd_id: The gsd_id of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """

        self._gsd_id = gsd_id

    @property
    def vuln_db_id(self):
        """Gets the vuln_db_id of this VulnerabilityAlias.  # noqa: E501


        :return: The vuln_db_id of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._vuln_db_id

    @vuln_db_id.setter
    def vuln_db_id(self, vuln_db_id):
        """Sets the vuln_db_id of this VulnerabilityAlias.


        :param vuln_db_id: The vuln_db_id of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """

        self._vuln_db_id = vuln_db_id

    @property
    def uuid(self):
        """Gets the uuid of this VulnerabilityAlias.  # noqa: E501


        :return: The uuid of this VulnerabilityAlias.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this VulnerabilityAlias.


        :param uuid: The uuid of this VulnerabilityAlias.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityAlias, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityAlias):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
