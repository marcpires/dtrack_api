# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepositoryMetaComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repository_type': 'str',
        'namespace': 'str',
        'name': 'str',
        'latest_version': 'str',
        'published': 'int',
        'last_check': 'int'
    }

    attribute_map = {
        'repository_type': 'repositoryType',
        'namespace': 'namespace',
        'name': 'name',
        'latest_version': 'latestVersion',
        'published': 'published',
        'last_check': 'lastCheck'
    }

    def __init__(self, repository_type=None, namespace=None, name=None, latest_version=None, published=None, last_check=None):  # noqa: E501
        """RepositoryMetaComponent - a model defined in Swagger"""  # noqa: E501
        self._repository_type = None
        self._namespace = None
        self._name = None
        self._latest_version = None
        self._published = None
        self._last_check = None
        self.discriminator = None
        self.repository_type = repository_type
        if namespace is not None:
            self.namespace = namespace
        self.name = name
        self.latest_version = latest_version
        self.published = published
        self.last_check = last_check

    @property
    def repository_type(self):
        """Gets the repository_type of this RepositoryMetaComponent.  # noqa: E501


        :return: The repository_type of this RepositoryMetaComponent.  # noqa: E501
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this RepositoryMetaComponent.


        :param repository_type: The repository_type of this RepositoryMetaComponent.  # noqa: E501
        :type: str
        """
        if repository_type is None:
            raise ValueError("Invalid value for `repository_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CPAN", "MAVEN", "NPM", "GEM", "PYPI", "NUGET", "HEX", "COMPOSER", "CARGO", "GO_MODULES", "GITHUB", "HACKAGE", "NIXPKGS", "UNSUPPORTED"]  # noqa: E501
        if repository_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_type` ({0}), must be one of {1}"  # noqa: E501
                .format(repository_type, allowed_values)
            )

        self._repository_type = repository_type

    @property
    def namespace(self):
        """Gets the namespace of this RepositoryMetaComponent.  # noqa: E501


        :return: The namespace of this RepositoryMetaComponent.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this RepositoryMetaComponent.


        :param namespace: The namespace of this RepositoryMetaComponent.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this RepositoryMetaComponent.  # noqa: E501


        :return: The name of this RepositoryMetaComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryMetaComponent.


        :param name: The name of this RepositoryMetaComponent.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def latest_version(self):
        """Gets the latest_version of this RepositoryMetaComponent.  # noqa: E501


        :return: The latest_version of this RepositoryMetaComponent.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this RepositoryMetaComponent.


        :param latest_version: The latest_version of this RepositoryMetaComponent.  # noqa: E501
        :type: str
        """
        if latest_version is None:
            raise ValueError("Invalid value for `latest_version`, must not be `None`")  # noqa: E501

        self._latest_version = latest_version

    @property
    def published(self):
        """Gets the published of this RepositoryMetaComponent.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The published of this RepositoryMetaComponent.  # noqa: E501
        :rtype: int
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this RepositoryMetaComponent.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param published: The published of this RepositoryMetaComponent.  # noqa: E501
        :type: int
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")  # noqa: E501

        self._published = published

    @property
    def last_check(self):
        """Gets the last_check of this RepositoryMetaComponent.  # noqa: E501

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The last_check of this RepositoryMetaComponent.  # noqa: E501
        :rtype: int
        """
        return self._last_check

    @last_check.setter
    def last_check(self, last_check):
        """Sets the last_check of this RepositoryMetaComponent.

        UNIX epoch timestamp in milliseconds  # noqa: E501

        :param last_check: The last_check of this RepositoryMetaComponent.  # noqa: E501
        :type: int
        """
        if last_check is None:
            raise ValueError("Invalid value for `last_check`, must not be `None`")  # noqa: E501

        self._last_check = last_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryMetaComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryMetaComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
