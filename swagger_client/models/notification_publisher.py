# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationPublisher(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'publisher_class': 'str',
        'template': 'str',
        'template_mime_type': 'str',
        'default_publisher': 'bool',
        'uuid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'publisher_class': 'publisherClass',
        'template': 'template',
        'template_mime_type': 'templateMimeType',
        'default_publisher': 'defaultPublisher',
        'uuid': 'uuid'
    }

    def __init__(self, name=None, description=None, publisher_class=None, template=None, template_mime_type=None, default_publisher=None, uuid=None):  # noqa: E501
        """NotificationPublisher - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._publisher_class = None
        self._template = None
        self._template_mime_type = None
        self._default_publisher = None
        self._uuid = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        self.publisher_class = publisher_class
        if template is not None:
            self.template = template
        self.template_mime_type = template_mime_type
        if default_publisher is not None:
            self.default_publisher = default_publisher
        self.uuid = uuid

    @property
    def name(self):
        """Gets the name of this NotificationPublisher.  # noqa: E501


        :return: The name of this NotificationPublisher.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationPublisher.


        :param name: The name of this NotificationPublisher.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NotificationPublisher.  # noqa: E501


        :return: The description of this NotificationPublisher.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationPublisher.


        :param description: The description of this NotificationPublisher.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def publisher_class(self):
        """Gets the publisher_class of this NotificationPublisher.  # noqa: E501


        :return: The publisher_class of this NotificationPublisher.  # noqa: E501
        :rtype: str
        """
        return self._publisher_class

    @publisher_class.setter
    def publisher_class(self, publisher_class):
        """Sets the publisher_class of this NotificationPublisher.


        :param publisher_class: The publisher_class of this NotificationPublisher.  # noqa: E501
        :type: str
        """
        if publisher_class is None:
            raise ValueError("Invalid value for `publisher_class`, must not be `None`")  # noqa: E501

        self._publisher_class = publisher_class

    @property
    def template(self):
        """Gets the template of this NotificationPublisher.  # noqa: E501


        :return: The template of this NotificationPublisher.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this NotificationPublisher.


        :param template: The template of this NotificationPublisher.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def template_mime_type(self):
        """Gets the template_mime_type of this NotificationPublisher.  # noqa: E501


        :return: The template_mime_type of this NotificationPublisher.  # noqa: E501
        :rtype: str
        """
        return self._template_mime_type

    @template_mime_type.setter
    def template_mime_type(self, template_mime_type):
        """Sets the template_mime_type of this NotificationPublisher.


        :param template_mime_type: The template_mime_type of this NotificationPublisher.  # noqa: E501
        :type: str
        """
        if template_mime_type is None:
            raise ValueError("Invalid value for `template_mime_type`, must not be `None`")  # noqa: E501

        self._template_mime_type = template_mime_type

    @property
    def default_publisher(self):
        """Gets the default_publisher of this NotificationPublisher.  # noqa: E501


        :return: The default_publisher of this NotificationPublisher.  # noqa: E501
        :rtype: bool
        """
        return self._default_publisher

    @default_publisher.setter
    def default_publisher(self, default_publisher):
        """Sets the default_publisher of this NotificationPublisher.


        :param default_publisher: The default_publisher of this NotificationPublisher.  # noqa: E501
        :type: bool
        """

        self._default_publisher = default_publisher

    @property
    def uuid(self):
        """Gets the uuid of this NotificationPublisher.  # noqa: E501


        :return: The uuid of this NotificationPublisher.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NotificationPublisher.


        :param uuid: The uuid of this NotificationPublisher.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationPublisher, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationPublisher):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
