# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TagListResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'project_count': 'int',
        'collection_project_count': 'int',
        'policy_count': 'int',
        'notification_rule_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'project_count': 'projectCount',
        'collection_project_count': 'collectionProjectCount',
        'policy_count': 'policyCount',
        'notification_rule_count': 'notificationRuleCount'
    }

    def __init__(self, name=None, project_count=None, collection_project_count=None, policy_count=None, notification_rule_count=None):  # noqa: E501
        """TagListResponseItem - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._project_count = None
        self._collection_project_count = None
        self._policy_count = None
        self._notification_rule_count = None
        self.discriminator = None
        self.name = name
        self.project_count = project_count
        self.collection_project_count = collection_project_count
        self.policy_count = policy_count
        self.notification_rule_count = notification_rule_count

    @property
    def name(self):
        """Gets the name of this TagListResponseItem.  # noqa: E501

        Name of the tag  # noqa: E501

        :return: The name of this TagListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagListResponseItem.

        Name of the tag  # noqa: E501

        :param name: The name of this TagListResponseItem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project_count(self):
        """Gets the project_count of this TagListResponseItem.  # noqa: E501

        Number of projects assigned to this tag  # noqa: E501

        :return: The project_count of this TagListResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._project_count

    @project_count.setter
    def project_count(self, project_count):
        """Sets the project_count of this TagListResponseItem.

        Number of projects assigned to this tag  # noqa: E501

        :param project_count: The project_count of this TagListResponseItem.  # noqa: E501
        :type: int
        """
        if project_count is None:
            raise ValueError("Invalid value for `project_count`, must not be `None`")  # noqa: E501

        self._project_count = project_count

    @property
    def collection_project_count(self):
        """Gets the collection_project_count of this TagListResponseItem.  # noqa: E501

        Number of collection projects assigned to this tag  # noqa: E501

        :return: The collection_project_count of this TagListResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._collection_project_count

    @collection_project_count.setter
    def collection_project_count(self, collection_project_count):
        """Sets the collection_project_count of this TagListResponseItem.

        Number of collection projects assigned to this tag  # noqa: E501

        :param collection_project_count: The collection_project_count of this TagListResponseItem.  # noqa: E501
        :type: int
        """
        if collection_project_count is None:
            raise ValueError("Invalid value for `collection_project_count`, must not be `None`")  # noqa: E501

        self._collection_project_count = collection_project_count

    @property
    def policy_count(self):
        """Gets the policy_count of this TagListResponseItem.  # noqa: E501

        Number of policies assigned to this tag  # noqa: E501

        :return: The policy_count of this TagListResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._policy_count

    @policy_count.setter
    def policy_count(self, policy_count):
        """Sets the policy_count of this TagListResponseItem.

        Number of policies assigned to this tag  # noqa: E501

        :param policy_count: The policy_count of this TagListResponseItem.  # noqa: E501
        :type: int
        """
        if policy_count is None:
            raise ValueError("Invalid value for `policy_count`, must not be `None`")  # noqa: E501

        self._policy_count = policy_count

    @property
    def notification_rule_count(self):
        """Gets the notification_rule_count of this TagListResponseItem.  # noqa: E501

        Number of notification rules assigned to this tag  # noqa: E501

        :return: The notification_rule_count of this TagListResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._notification_rule_count

    @notification_rule_count.setter
    def notification_rule_count(self, notification_rule_count):
        """Sets the notification_rule_count of this TagListResponseItem.

        Number of notification rules assigned to this tag  # noqa: E501

        :param notification_rule_count: The notification_rule_count of this TagListResponseItem.  # noqa: E501
        :type: int
        """
        if notification_rule_count is None:
            raise ValueError("Invalid value for `notification_rule_count`, must not be `None`")  # noqa: E501

        self._notification_rule_count = notification_rule_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagListResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagListResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
