# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComponentProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'property_name': 'str',
        'property_value': 'str',
        'property_type': 'str',
        'description': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'group_name': 'groupName',
        'property_name': 'propertyName',
        'property_value': 'propertyValue',
        'property_type': 'propertyType',
        'description': 'description',
        'uuid': 'uuid'
    }

    def __init__(self, group_name=None, property_name=None, property_value=None, property_type=None, description=None, uuid=None):  # noqa: E501
        """ComponentProperty - a model defined in Swagger"""  # noqa: E501
        self._group_name = None
        self._property_name = None
        self._property_value = None
        self._property_type = None
        self._description = None
        self._uuid = None
        self.discriminator = None
        if group_name is not None:
            self.group_name = group_name
        if property_name is not None:
            self.property_name = property_name
        if property_value is not None:
            self.property_value = property_value
        self.property_type = property_type
        if description is not None:
            self.description = description
        self.uuid = uuid

    @property
    def group_name(self):
        """Gets the group_name of this ComponentProperty.  # noqa: E501


        :return: The group_name of this ComponentProperty.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ComponentProperty.


        :param group_name: The group_name of this ComponentProperty.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def property_name(self):
        """Gets the property_name of this ComponentProperty.  # noqa: E501


        :return: The property_name of this ComponentProperty.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this ComponentProperty.


        :param property_name: The property_name of this ComponentProperty.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def property_value(self):
        """Gets the property_value of this ComponentProperty.  # noqa: E501


        :return: The property_value of this ComponentProperty.  # noqa: E501
        :rtype: str
        """
        return self._property_value

    @property_value.setter
    def property_value(self, property_value):
        """Sets the property_value of this ComponentProperty.


        :param property_value: The property_value of this ComponentProperty.  # noqa: E501
        :type: str
        """

        self._property_value = property_value

    @property
    def property_type(self):
        """Gets the property_type of this ComponentProperty.  # noqa: E501


        :return: The property_type of this ComponentProperty.  # noqa: E501
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this ComponentProperty.


        :param property_type: The property_type of this ComponentProperty.  # noqa: E501
        :type: str
        """
        if property_type is None:
            raise ValueError("Invalid value for `property_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BOOLEAN", "INTEGER", "NUMBER", "STRING", "ENCRYPTEDSTRING", "TIMESTAMP", "URL", "UUID"]  # noqa: E501
        if property_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_type` ({0}), must be one of {1}"  # noqa: E501
                .format(property_type, allowed_values)
            )

        self._property_type = property_type

    @property
    def description(self):
        """Gets the description of this ComponentProperty.  # noqa: E501


        :return: The description of this ComponentProperty.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComponentProperty.


        :param description: The description of this ComponentProperty.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def uuid(self):
        """Gets the uuid of this ComponentProperty.  # noqa: E501


        :return: The uuid of this ComponentProperty.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ComponentProperty.


        :param uuid: The uuid of this ComponentProperty.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComponentProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComponentProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
