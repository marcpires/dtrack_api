# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Finding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component': 'dict(str, object)',
        'vulnerability': 'dict(str, object)',
        'analysis': 'dict(str, object)',
        'attribution': 'dict(str, object)',
        'matrix': 'str'
    }

    attribute_map = {
        'component': 'component',
        'vulnerability': 'vulnerability',
        'analysis': 'analysis',
        'attribution': 'attribution',
        'matrix': 'matrix'
    }

    def __init__(self, component=None, vulnerability=None, analysis=None, attribution=None, matrix=None):  # noqa: E501
        """Finding - a model defined in Swagger"""  # noqa: E501
        self._component = None
        self._vulnerability = None
        self._analysis = None
        self._attribution = None
        self._matrix = None
        self.discriminator = None
        if component is not None:
            self.component = component
        if vulnerability is not None:
            self.vulnerability = vulnerability
        if analysis is not None:
            self.analysis = analysis
        if attribution is not None:
            self.attribution = attribution
        if matrix is not None:
            self.matrix = matrix

    @property
    def component(self):
        """Gets the component of this Finding.  # noqa: E501


        :return: The component of this Finding.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this Finding.


        :param component: The component of this Finding.  # noqa: E501
        :type: dict(str, object)
        """

        self._component = component

    @property
    def vulnerability(self):
        """Gets the vulnerability of this Finding.  # noqa: E501


        :return: The vulnerability of this Finding.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this Finding.


        :param vulnerability: The vulnerability of this Finding.  # noqa: E501
        :type: dict(str, object)
        """

        self._vulnerability = vulnerability

    @property
    def analysis(self):
        """Gets the analysis of this Finding.  # noqa: E501


        :return: The analysis of this Finding.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this Finding.


        :param analysis: The analysis of this Finding.  # noqa: E501
        :type: dict(str, object)
        """

        self._analysis = analysis

    @property
    def attribution(self):
        """Gets the attribution of this Finding.  # noqa: E501


        :return: The attribution of this Finding.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this Finding.


        :param attribution: The attribution of this Finding.  # noqa: E501
        :type: dict(str, object)
        """

        self._attribution = attribution

    @property
    def matrix(self):
        """Gets the matrix of this Finding.  # noqa: E501


        :return: The matrix of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._matrix

    @matrix.setter
    def matrix(self, matrix):
        """Sets the matrix of this Finding.


        :param matrix: The matrix of this Finding.  # noqa: E501
        :type: str
        """

        self._matrix = matrix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Finding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Finding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
