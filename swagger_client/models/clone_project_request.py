# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CloneProjectRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'str',
        'version': 'str',
        'include_tags': 'bool',
        'include_properties': 'bool',
        'include_dependencies': 'bool',
        'include_components': 'bool',
        'include_services': 'bool',
        'include_audit_history': 'bool',
        'include_acl': 'bool',
        'include_policy_violations': 'bool',
        'make_clone_latest': 'bool'
    }

    attribute_map = {
        'project': 'project',
        'version': 'version',
        'include_tags': 'includeTags',
        'include_properties': 'includeProperties',
        'include_dependencies': 'includeDependencies',
        'include_components': 'includeComponents',
        'include_services': 'includeServices',
        'include_audit_history': 'includeAuditHistory',
        'include_acl': 'includeACL',
        'include_policy_violations': 'includePolicyViolations',
        'make_clone_latest': 'makeCloneLatest'
    }

    def __init__(self, project=None, version=None, include_tags=None, include_properties=None, include_dependencies=None, include_components=None, include_services=None, include_audit_history=None, include_acl=None, include_policy_violations=None, make_clone_latest=None):  # noqa: E501
        """CloneProjectRequest - a model defined in Swagger"""  # noqa: E501
        self._project = None
        self._version = None
        self._include_tags = None
        self._include_properties = None
        self._include_dependencies = None
        self._include_components = None
        self._include_services = None
        self._include_audit_history = None
        self._include_acl = None
        self._include_policy_violations = None
        self._make_clone_latest = None
        self.discriminator = None
        self.project = project
        self.version = version
        if include_tags is not None:
            self.include_tags = include_tags
        if include_properties is not None:
            self.include_properties = include_properties
        if include_dependencies is not None:
            self.include_dependencies = include_dependencies
        if include_components is not None:
            self.include_components = include_components
        if include_services is not None:
            self.include_services = include_services
        if include_audit_history is not None:
            self.include_audit_history = include_audit_history
        if include_acl is not None:
            self.include_acl = include_acl
        if include_policy_violations is not None:
            self.include_policy_violations = include_policy_violations
        if make_clone_latest is not None:
            self.make_clone_latest = make_clone_latest

    @property
    def project(self):
        """Gets the project of this CloneProjectRequest.  # noqa: E501


        :return: The project of this CloneProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CloneProjectRequest.


        :param project: The project of this CloneProjectRequest.  # noqa: E501
        :type: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def version(self):
        """Gets the version of this CloneProjectRequest.  # noqa: E501


        :return: The version of this CloneProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CloneProjectRequest.


        :param version: The version of this CloneProjectRequest.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def include_tags(self):
        """Gets the include_tags of this CloneProjectRequest.  # noqa: E501


        :return: The include_tags of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_tags

    @include_tags.setter
    def include_tags(self, include_tags):
        """Sets the include_tags of this CloneProjectRequest.


        :param include_tags: The include_tags of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._include_tags = include_tags

    @property
    def include_properties(self):
        """Gets the include_properties of this CloneProjectRequest.  # noqa: E501


        :return: The include_properties of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_properties

    @include_properties.setter
    def include_properties(self, include_properties):
        """Sets the include_properties of this CloneProjectRequest.


        :param include_properties: The include_properties of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._include_properties = include_properties

    @property
    def include_dependencies(self):
        """Gets the include_dependencies of this CloneProjectRequest.  # noqa: E501


        :return: The include_dependencies of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_dependencies

    @include_dependencies.setter
    def include_dependencies(self, include_dependencies):
        """Sets the include_dependencies of this CloneProjectRequest.


        :param include_dependencies: The include_dependencies of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._include_dependencies = include_dependencies

    @property
    def include_components(self):
        """Gets the include_components of this CloneProjectRequest.  # noqa: E501


        :return: The include_components of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_components

    @include_components.setter
    def include_components(self, include_components):
        """Sets the include_components of this CloneProjectRequest.


        :param include_components: The include_components of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._include_components = include_components

    @property
    def include_services(self):
        """Gets the include_services of this CloneProjectRequest.  # noqa: E501


        :return: The include_services of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_services

    @include_services.setter
    def include_services(self, include_services):
        """Sets the include_services of this CloneProjectRequest.


        :param include_services: The include_services of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._include_services = include_services

    @property
    def include_audit_history(self):
        """Gets the include_audit_history of this CloneProjectRequest.  # noqa: E501


        :return: The include_audit_history of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_audit_history

    @include_audit_history.setter
    def include_audit_history(self, include_audit_history):
        """Sets the include_audit_history of this CloneProjectRequest.


        :param include_audit_history: The include_audit_history of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._include_audit_history = include_audit_history

    @property
    def include_acl(self):
        """Gets the include_acl of this CloneProjectRequest.  # noqa: E501


        :return: The include_acl of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_acl

    @include_acl.setter
    def include_acl(self, include_acl):
        """Sets the include_acl of this CloneProjectRequest.


        :param include_acl: The include_acl of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._include_acl = include_acl

    @property
    def include_policy_violations(self):
        """Gets the include_policy_violations of this CloneProjectRequest.  # noqa: E501


        :return: The include_policy_violations of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_policy_violations

    @include_policy_violations.setter
    def include_policy_violations(self, include_policy_violations):
        """Sets the include_policy_violations of this CloneProjectRequest.


        :param include_policy_violations: The include_policy_violations of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._include_policy_violations = include_policy_violations

    @property
    def make_clone_latest(self):
        """Gets the make_clone_latest of this CloneProjectRequest.  # noqa: E501


        :return: The make_clone_latest of this CloneProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._make_clone_latest

    @make_clone_latest.setter
    def make_clone_latest(self, make_clone_latest):
        """Sets the make_clone_latest of this CloneProjectRequest.


        :param make_clone_latest: The make_clone_latest of this CloneProjectRequest.  # noqa: E501
        :type: bool
        """

        self._make_clone_latest = make_clone_latest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloneProjectRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloneProjectRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
