# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'str',
        'component': 'str',
        'vulnerability': 'str',
        'analysis_state': 'str',
        'analysis_justification': 'str',
        'analysis_response': 'str',
        'analysis_details': 'str',
        'comment': 'str',
        'is_suppressed': 'bool',
        'suppressed': 'bool'
    }

    attribute_map = {
        'project': 'project',
        'component': 'component',
        'vulnerability': 'vulnerability',
        'analysis_state': 'analysisState',
        'analysis_justification': 'analysisJustification',
        'analysis_response': 'analysisResponse',
        'analysis_details': 'analysisDetails',
        'comment': 'comment',
        'is_suppressed': 'isSuppressed',
        'suppressed': 'suppressed'
    }

    def __init__(self, project=None, component=None, vulnerability=None, analysis_state=None, analysis_justification=None, analysis_response=None, analysis_details=None, comment=None, is_suppressed=None, suppressed=None):  # noqa: E501
        """AnalysisRequest - a model defined in Swagger"""  # noqa: E501
        self._project = None
        self._component = None
        self._vulnerability = None
        self._analysis_state = None
        self._analysis_justification = None
        self._analysis_response = None
        self._analysis_details = None
        self._comment = None
        self._is_suppressed = None
        self._suppressed = None
        self.discriminator = None
        if project is not None:
            self.project = project
        self.component = component
        self.vulnerability = vulnerability
        if analysis_state is not None:
            self.analysis_state = analysis_state
        if analysis_justification is not None:
            self.analysis_justification = analysis_justification
        if analysis_response is not None:
            self.analysis_response = analysis_response
        if analysis_details is not None:
            self.analysis_details = analysis_details
        if comment is not None:
            self.comment = comment
        if is_suppressed is not None:
            self.is_suppressed = is_suppressed
        if suppressed is not None:
            self.suppressed = suppressed

    @property
    def project(self):
        """Gets the project of this AnalysisRequest.  # noqa: E501


        :return: The project of this AnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AnalysisRequest.


        :param project: The project of this AnalysisRequest.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def component(self):
        """Gets the component of this AnalysisRequest.  # noqa: E501


        :return: The component of this AnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this AnalysisRequest.


        :param component: The component of this AnalysisRequest.  # noqa: E501
        :type: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")  # noqa: E501

        self._component = component

    @property
    def vulnerability(self):
        """Gets the vulnerability of this AnalysisRequest.  # noqa: E501


        :return: The vulnerability of this AnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this AnalysisRequest.


        :param vulnerability: The vulnerability of this AnalysisRequest.  # noqa: E501
        :type: str
        """
        if vulnerability is None:
            raise ValueError("Invalid value for `vulnerability`, must not be `None`")  # noqa: E501

        self._vulnerability = vulnerability

    @property
    def analysis_state(self):
        """Gets the analysis_state of this AnalysisRequest.  # noqa: E501


        :return: The analysis_state of this AnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._analysis_state

    @analysis_state.setter
    def analysis_state(self, analysis_state):
        """Sets the analysis_state of this AnalysisRequest.


        :param analysis_state: The analysis_state of this AnalysisRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["EXPLOITABLE", "IN_TRIAGE", "FALSE_POSITIVE", "NOT_AFFECTED", "RESOLVED", "NOT_SET"]  # noqa: E501
        if analysis_state not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_state` ({0}), must be one of {1}"  # noqa: E501
                .format(analysis_state, allowed_values)
            )

        self._analysis_state = analysis_state

    @property
    def analysis_justification(self):
        """Gets the analysis_justification of this AnalysisRequest.  # noqa: E501


        :return: The analysis_justification of this AnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._analysis_justification

    @analysis_justification.setter
    def analysis_justification(self, analysis_justification):
        """Sets the analysis_justification of this AnalysisRequest.


        :param analysis_justification: The analysis_justification of this AnalysisRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CODE_NOT_PRESENT", "CODE_NOT_REACHABLE", "REQUIRES_CONFIGURATION", "REQUIRES_DEPENDENCY", "REQUIRES_ENVIRONMENT", "PROTECTED_BY_COMPILER", "PROTECTED_AT_RUNTIME", "PROTECTED_AT_PERIMETER", "PROTECTED_BY_MITIGATING_CONTROL", "NOT_SET"]  # noqa: E501
        if analysis_justification not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_justification` ({0}), must be one of {1}"  # noqa: E501
                .format(analysis_justification, allowed_values)
            )

        self._analysis_justification = analysis_justification

    @property
    def analysis_response(self):
        """Gets the analysis_response of this AnalysisRequest.  # noqa: E501


        :return: The analysis_response of this AnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._analysis_response

    @analysis_response.setter
    def analysis_response(self, analysis_response):
        """Sets the analysis_response of this AnalysisRequest.


        :param analysis_response: The analysis_response of this AnalysisRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CAN_NOT_FIX", "WILL_NOT_FIX", "UPDATE", "ROLLBACK", "WORKAROUND_AVAILABLE", "NOT_SET"]  # noqa: E501
        if analysis_response not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_response` ({0}), must be one of {1}"  # noqa: E501
                .format(analysis_response, allowed_values)
            )

        self._analysis_response = analysis_response

    @property
    def analysis_details(self):
        """Gets the analysis_details of this AnalysisRequest.  # noqa: E501


        :return: The analysis_details of this AnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._analysis_details

    @analysis_details.setter
    def analysis_details(self, analysis_details):
        """Sets the analysis_details of this AnalysisRequest.


        :param analysis_details: The analysis_details of this AnalysisRequest.  # noqa: E501
        :type: str
        """

        self._analysis_details = analysis_details

    @property
    def comment(self):
        """Gets the comment of this AnalysisRequest.  # noqa: E501


        :return: The comment of this AnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AnalysisRequest.


        :param comment: The comment of this AnalysisRequest.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def is_suppressed(self):
        """Gets the is_suppressed of this AnalysisRequest.  # noqa: E501


        :return: The is_suppressed of this AnalysisRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_suppressed

    @is_suppressed.setter
    def is_suppressed(self, is_suppressed):
        """Sets the is_suppressed of this AnalysisRequest.


        :param is_suppressed: The is_suppressed of this AnalysisRequest.  # noqa: E501
        :type: bool
        """

        self._is_suppressed = is_suppressed

    @property
    def suppressed(self):
        """Gets the suppressed of this AnalysisRequest.  # noqa: E501


        :return: The suppressed of this AnalysisRequest.  # noqa: E501
        :rtype: bool
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this AnalysisRequest.


        :param suppressed: The suppressed of this AnalysisRequest.  # noqa: E501
        :type: bool
        """

        self._suppressed = suppressed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
