# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'api_keys': 'list[ApiKey]',
        'ldap_users': 'list[LdapUser]',
        'managed_users': 'list[ManagedUser]',
        'oidc_users': 'list[OidcUser]',
        'mapped_ldap_groups': 'list[MappedLdapGroup]',
        'mapped_oidc_groups': 'list[MappedOidcGroup]',
        'permissions': 'list[Permission]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'api_keys': 'apiKeys',
        'ldap_users': 'ldapUsers',
        'managed_users': 'managedUsers',
        'oidc_users': 'oidcUsers',
        'mapped_ldap_groups': 'mappedLdapGroups',
        'mapped_oidc_groups': 'mappedOidcGroups',
        'permissions': 'permissions'
    }

    def __init__(self, uuid=None, name=None, api_keys=None, ldap_users=None, managed_users=None, oidc_users=None, mapped_ldap_groups=None, mapped_oidc_groups=None, permissions=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._name = None
        self._api_keys = None
        self._ldap_users = None
        self._managed_users = None
        self._oidc_users = None
        self._mapped_ldap_groups = None
        self._mapped_oidc_groups = None
        self._permissions = None
        self.discriminator = None
        self.uuid = uuid
        if name is not None:
            self.name = name
        if api_keys is not None:
            self.api_keys = api_keys
        if ldap_users is not None:
            self.ldap_users = ldap_users
        if managed_users is not None:
            self.managed_users = managed_users
        if oidc_users is not None:
            self.oidc_users = oidc_users
        if mapped_ldap_groups is not None:
            self.mapped_ldap_groups = mapped_ldap_groups
        if mapped_oidc_groups is not None:
            self.mapped_oidc_groups = mapped_oidc_groups
        if permissions is not None:
            self.permissions = permissions

    @property
    def uuid(self):
        """Gets the uuid of this Team.  # noqa: E501


        :return: The uuid of this Team.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Team.


        :param uuid: The uuid of this Team.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501


        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.


        :param name: The name of this Team.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def api_keys(self):
        """Gets the api_keys of this Team.  # noqa: E501


        :return: The api_keys of this Team.  # noqa: E501
        :rtype: list[ApiKey]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys):
        """Sets the api_keys of this Team.


        :param api_keys: The api_keys of this Team.  # noqa: E501
        :type: list[ApiKey]
        """

        self._api_keys = api_keys

    @property
    def ldap_users(self):
        """Gets the ldap_users of this Team.  # noqa: E501


        :return: The ldap_users of this Team.  # noqa: E501
        :rtype: list[LdapUser]
        """
        return self._ldap_users

    @ldap_users.setter
    def ldap_users(self, ldap_users):
        """Sets the ldap_users of this Team.


        :param ldap_users: The ldap_users of this Team.  # noqa: E501
        :type: list[LdapUser]
        """

        self._ldap_users = ldap_users

    @property
    def managed_users(self):
        """Gets the managed_users of this Team.  # noqa: E501


        :return: The managed_users of this Team.  # noqa: E501
        :rtype: list[ManagedUser]
        """
        return self._managed_users

    @managed_users.setter
    def managed_users(self, managed_users):
        """Sets the managed_users of this Team.


        :param managed_users: The managed_users of this Team.  # noqa: E501
        :type: list[ManagedUser]
        """

        self._managed_users = managed_users

    @property
    def oidc_users(self):
        """Gets the oidc_users of this Team.  # noqa: E501


        :return: The oidc_users of this Team.  # noqa: E501
        :rtype: list[OidcUser]
        """
        return self._oidc_users

    @oidc_users.setter
    def oidc_users(self, oidc_users):
        """Sets the oidc_users of this Team.


        :param oidc_users: The oidc_users of this Team.  # noqa: E501
        :type: list[OidcUser]
        """

        self._oidc_users = oidc_users

    @property
    def mapped_ldap_groups(self):
        """Gets the mapped_ldap_groups of this Team.  # noqa: E501


        :return: The mapped_ldap_groups of this Team.  # noqa: E501
        :rtype: list[MappedLdapGroup]
        """
        return self._mapped_ldap_groups

    @mapped_ldap_groups.setter
    def mapped_ldap_groups(self, mapped_ldap_groups):
        """Sets the mapped_ldap_groups of this Team.


        :param mapped_ldap_groups: The mapped_ldap_groups of this Team.  # noqa: E501
        :type: list[MappedLdapGroup]
        """

        self._mapped_ldap_groups = mapped_ldap_groups

    @property
    def mapped_oidc_groups(self):
        """Gets the mapped_oidc_groups of this Team.  # noqa: E501


        :return: The mapped_oidc_groups of this Team.  # noqa: E501
        :rtype: list[MappedOidcGroup]
        """
        return self._mapped_oidc_groups

    @mapped_oidc_groups.setter
    def mapped_oidc_groups(self, mapped_oidc_groups):
        """Sets the mapped_oidc_groups of this Team.


        :param mapped_oidc_groups: The mapped_oidc_groups of this Team.  # noqa: E501
        :type: list[MappedOidcGroup]
        """

        self._mapped_oidc_groups = mapped_oidc_groups

    @property
    def permissions(self):
        """Gets the permissions of this Team.  # noqa: E501


        :return: The permissions of this Team.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Team.


        :param permissions: The permissions of this Team.  # noqa: E501
        :type: list[Permission]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
