# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'enabled': 'bool',
        'notify_children': 'bool',
        'log_successful_publish': 'bool',
        'scope': 'str',
        'notification_level': 'str',
        'projects': 'list[Project]',
        'tags': 'list[Tag]',
        'teams': 'list[Team]',
        'notify_on': 'list[str]',
        'message': 'str',
        'publisher': 'NotificationPublisher',
        'publisher_config': 'str',
        'trigger_type': 'str',
        'schedule_last_triggered_at': 'int',
        'schedule_next_trigger_at': 'int',
        'schedule_cron': 'str',
        'schedule_skip_unchanged': 'bool',
        'uuid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'enabled': 'enabled',
        'notify_children': 'notifyChildren',
        'log_successful_publish': 'logSuccessfulPublish',
        'scope': 'scope',
        'notification_level': 'notificationLevel',
        'projects': 'projects',
        'tags': 'tags',
        'teams': 'teams',
        'notify_on': 'notifyOn',
        'message': 'message',
        'publisher': 'publisher',
        'publisher_config': 'publisherConfig',
        'trigger_type': 'triggerType',
        'schedule_last_triggered_at': 'scheduleLastTriggeredAt',
        'schedule_next_trigger_at': 'scheduleNextTriggerAt',
        'schedule_cron': 'scheduleCron',
        'schedule_skip_unchanged': 'scheduleSkipUnchanged',
        'uuid': 'uuid'
    }

    def __init__(self, name=None, enabled=None, notify_children=None, log_successful_publish=None, scope=None, notification_level=None, projects=None, tags=None, teams=None, notify_on=None, message=None, publisher=None, publisher_config=None, trigger_type=None, schedule_last_triggered_at=None, schedule_next_trigger_at=None, schedule_cron=None, schedule_skip_unchanged=None, uuid=None):  # noqa: E501
        """NotificationRule - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._enabled = None
        self._notify_children = None
        self._log_successful_publish = None
        self._scope = None
        self._notification_level = None
        self._projects = None
        self._tags = None
        self._teams = None
        self._notify_on = None
        self._message = None
        self._publisher = None
        self._publisher_config = None
        self._trigger_type = None
        self._schedule_last_triggered_at = None
        self._schedule_next_trigger_at = None
        self._schedule_cron = None
        self._schedule_skip_unchanged = None
        self._uuid = None
        self.discriminator = None
        self.name = name
        if enabled is not None:
            self.enabled = enabled
        if notify_children is not None:
            self.notify_children = notify_children
        if log_successful_publish is not None:
            self.log_successful_publish = log_successful_publish
        self.scope = scope
        if notification_level is not None:
            self.notification_level = notification_level
        if projects is not None:
            self.projects = projects
        if tags is not None:
            self.tags = tags
        if teams is not None:
            self.teams = teams
        if notify_on is not None:
            self.notify_on = notify_on
        if message is not None:
            self.message = message
        if publisher is not None:
            self.publisher = publisher
        if publisher_config is not None:
            self.publisher_config = publisher_config
        self.trigger_type = trigger_type
        if schedule_last_triggered_at is not None:
            self.schedule_last_triggered_at = schedule_last_triggered_at
        if schedule_next_trigger_at is not None:
            self.schedule_next_trigger_at = schedule_next_trigger_at
        if schedule_cron is not None:
            self.schedule_cron = schedule_cron
        if schedule_skip_unchanged is not None:
            self.schedule_skip_unchanged = schedule_skip_unchanged
        self.uuid = uuid

    @property
    def name(self):
        """Gets the name of this NotificationRule.  # noqa: E501


        :return: The name of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationRule.


        :param name: The name of this NotificationRule.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this NotificationRule.  # noqa: E501


        :return: The enabled of this NotificationRule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NotificationRule.


        :param enabled: The enabled of this NotificationRule.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def notify_children(self):
        """Gets the notify_children of this NotificationRule.  # noqa: E501


        :return: The notify_children of this NotificationRule.  # noqa: E501
        :rtype: bool
        """
        return self._notify_children

    @notify_children.setter
    def notify_children(self, notify_children):
        """Sets the notify_children of this NotificationRule.


        :param notify_children: The notify_children of this NotificationRule.  # noqa: E501
        :type: bool
        """

        self._notify_children = notify_children

    @property
    def log_successful_publish(self):
        """Gets the log_successful_publish of this NotificationRule.  # noqa: E501


        :return: The log_successful_publish of this NotificationRule.  # noqa: E501
        :rtype: bool
        """
        return self._log_successful_publish

    @log_successful_publish.setter
    def log_successful_publish(self, log_successful_publish):
        """Sets the log_successful_publish of this NotificationRule.


        :param log_successful_publish: The log_successful_publish of this NotificationRule.  # noqa: E501
        :type: bool
        """

        self._log_successful_publish = log_successful_publish

    @property
    def scope(self):
        """Gets the scope of this NotificationRule.  # noqa: E501


        :return: The scope of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this NotificationRule.


        :param scope: The scope of this NotificationRule.  # noqa: E501
        :type: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501
        allowed_values = ["SYSTEM", "PORTFOLIO"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def notification_level(self):
        """Gets the notification_level of this NotificationRule.  # noqa: E501


        :return: The notification_level of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._notification_level

    @notification_level.setter
    def notification_level(self, notification_level):
        """Sets the notification_level of this NotificationRule.


        :param notification_level: The notification_level of this NotificationRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["INFORMATIONAL", "WARNING", "ERROR"]  # noqa: E501
        if notification_level not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_level` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_level, allowed_values)
            )

        self._notification_level = notification_level

    @property
    def projects(self):
        """Gets the projects of this NotificationRule.  # noqa: E501


        :return: The projects of this NotificationRule.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this NotificationRule.


        :param projects: The projects of this NotificationRule.  # noqa: E501
        :type: list[Project]
        """

        self._projects = projects

    @property
    def tags(self):
        """Gets the tags of this NotificationRule.  # noqa: E501


        :return: The tags of this NotificationRule.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NotificationRule.


        :param tags: The tags of this NotificationRule.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def teams(self):
        """Gets the teams of this NotificationRule.  # noqa: E501


        :return: The teams of this NotificationRule.  # noqa: E501
        :rtype: list[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this NotificationRule.


        :param teams: The teams of this NotificationRule.  # noqa: E501
        :type: list[Team]
        """

        self._teams = teams

    @property
    def notify_on(self):
        """Gets the notify_on of this NotificationRule.  # noqa: E501


        :return: The notify_on of this NotificationRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._notify_on

    @notify_on.setter
    def notify_on(self, notify_on):
        """Sets the notify_on of this NotificationRule.


        :param notify_on: The notify_on of this NotificationRule.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CONFIGURATION", "DATASOURCE_MIRRORING", "REPOSITORY", "INTEGRATION", "INDEXING_SERVICE", "FILE_SYSTEM", "ANALYZER", "NEW_VULNERABILITY", "NEW_VULNERABILITIES_SUMMARY", "NEW_VULNERABLE_DEPENDENCY", "PROJECT_AUDIT_CHANGE", "BOM_CONSUMED", "BOM_PROCESSED", "BOM_PROCESSING_FAILED", "BOM_VALIDATION_FAILED", "VEX_CONSUMED", "VEX_PROCESSED", "POLICY_VIOLATION", "NEW_POLICY_VIOLATIONS_SUMMARY", "PROJECT_CREATED", "USER_CREATED", "USER_DELETED"]  # noqa: E501
        if not set(notify_on).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `notify_on` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(notify_on) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._notify_on = notify_on

    @property
    def message(self):
        """Gets the message of this NotificationRule.  # noqa: E501


        :return: The message of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotificationRule.


        :param message: The message of this NotificationRule.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def publisher(self):
        """Gets the publisher of this NotificationRule.  # noqa: E501


        :return: The publisher of this NotificationRule.  # noqa: E501
        :rtype: NotificationPublisher
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this NotificationRule.


        :param publisher: The publisher of this NotificationRule.  # noqa: E501
        :type: NotificationPublisher
        """

        self._publisher = publisher

    @property
    def publisher_config(self):
        """Gets the publisher_config of this NotificationRule.  # noqa: E501


        :return: The publisher_config of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._publisher_config

    @publisher_config.setter
    def publisher_config(self, publisher_config):
        """Sets the publisher_config of this NotificationRule.


        :param publisher_config: The publisher_config of this NotificationRule.  # noqa: E501
        :type: str
        """

        self._publisher_config = publisher_config

    @property
    def trigger_type(self):
        """Gets the trigger_type of this NotificationRule.  # noqa: E501


        :return: The trigger_type of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this NotificationRule.


        :param trigger_type: The trigger_type of this NotificationRule.  # noqa: E501
        :type: str
        """
        if trigger_type is None:
            raise ValueError("Invalid value for `trigger_type`, must not be `None`")  # noqa: E501
        allowed_values = ["EVENT", "SCHEDULE"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def schedule_last_triggered_at(self):
        """Gets the schedule_last_triggered_at of this NotificationRule.  # noqa: E501

        When the schedule last triggered, as UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The schedule_last_triggered_at of this NotificationRule.  # noqa: E501
        :rtype: int
        """
        return self._schedule_last_triggered_at

    @schedule_last_triggered_at.setter
    def schedule_last_triggered_at(self, schedule_last_triggered_at):
        """Sets the schedule_last_triggered_at of this NotificationRule.

        When the schedule last triggered, as UNIX epoch timestamp in milliseconds  # noqa: E501

        :param schedule_last_triggered_at: The schedule_last_triggered_at of this NotificationRule.  # noqa: E501
        :type: int
        """

        self._schedule_last_triggered_at = schedule_last_triggered_at

    @property
    def schedule_next_trigger_at(self):
        """Gets the schedule_next_trigger_at of this NotificationRule.  # noqa: E501

        When the schedule triggers next, as UNIX epoch timestamp in milliseconds  # noqa: E501

        :return: The schedule_next_trigger_at of this NotificationRule.  # noqa: E501
        :rtype: int
        """
        return self._schedule_next_trigger_at

    @schedule_next_trigger_at.setter
    def schedule_next_trigger_at(self, schedule_next_trigger_at):
        """Sets the schedule_next_trigger_at of this NotificationRule.

        When the schedule triggers next, as UNIX epoch timestamp in milliseconds  # noqa: E501

        :param schedule_next_trigger_at: The schedule_next_trigger_at of this NotificationRule.  # noqa: E501
        :type: int
        """

        self._schedule_next_trigger_at = schedule_next_trigger_at

    @property
    def schedule_cron(self):
        """Gets the schedule_cron of this NotificationRule.  # noqa: E501

        Schedule of this rule as cron expression. Must not be set for rules with trigger type EVENT.  # noqa: E501

        :return: The schedule_cron of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._schedule_cron

    @schedule_cron.setter
    def schedule_cron(self, schedule_cron):
        """Sets the schedule_cron of this NotificationRule.

        Schedule of this rule as cron expression. Must not be set for rules with trigger type EVENT.  # noqa: E501

        :param schedule_cron: The schedule_cron of this NotificationRule.  # noqa: E501
        :type: str
        """

        self._schedule_cron = schedule_cron

    @property
    def schedule_skip_unchanged(self):
        """Gets the schedule_skip_unchanged of this NotificationRule.  # noqa: E501

        Whether to skip emitting a scheduled notification if it doesn't contain any changes since its last emission. Must not be set for rules with trigger type EVENT.  # noqa: E501

        :return: The schedule_skip_unchanged of this NotificationRule.  # noqa: E501
        :rtype: bool
        """
        return self._schedule_skip_unchanged

    @schedule_skip_unchanged.setter
    def schedule_skip_unchanged(self, schedule_skip_unchanged):
        """Sets the schedule_skip_unchanged of this NotificationRule.

        Whether to skip emitting a scheduled notification if it doesn't contain any changes since its last emission. Must not be set for rules with trigger type EVENT.  # noqa: E501

        :param schedule_skip_unchanged: The schedule_skip_unchanged of this NotificationRule.  # noqa: E501
        :type: bool
        """

        self._schedule_skip_unchanged = schedule_skip_unchanged

    @property
    def uuid(self):
        """Gets the uuid of this NotificationRule.  # noqa: E501


        :return: The uuid of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NotificationRule.


        :param uuid: The uuid of this NotificationRule.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
