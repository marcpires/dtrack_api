# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AffectedComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity_type': 'str',
        'identity': 'str',
        'version_type': 'str',
        'version': 'str',
        'version_end_excluding': 'str',
        'version_end_including': 'str',
        'version_start_excluding': 'str',
        'version_start_including': 'str',
        'uuid': 'str',
        'affected_version_attributions': 'list[AffectedVersionAttribution]'
    }

    attribute_map = {
        'identity_type': 'identityType',
        'identity': 'identity',
        'version_type': 'versionType',
        'version': 'version',
        'version_end_excluding': 'versionEndExcluding',
        'version_end_including': 'versionEndIncluding',
        'version_start_excluding': 'versionStartExcluding',
        'version_start_including': 'versionStartIncluding',
        'uuid': 'uuid',
        'affected_version_attributions': 'affectedVersionAttributions'
    }

    def __init__(self, identity_type=None, identity=None, version_type=None, version=None, version_end_excluding=None, version_end_including=None, version_start_excluding=None, version_start_including=None, uuid=None, affected_version_attributions=None):  # noqa: E501
        """AffectedComponent - a model defined in Swagger"""  # noqa: E501
        self._identity_type = None
        self._identity = None
        self._version_type = None
        self._version = None
        self._version_end_excluding = None
        self._version_end_including = None
        self._version_start_excluding = None
        self._version_start_including = None
        self._uuid = None
        self._affected_version_attributions = None
        self.discriminator = None
        if identity_type is not None:
            self.identity_type = identity_type
        if identity is not None:
            self.identity = identity
        if version_type is not None:
            self.version_type = version_type
        if version is not None:
            self.version = version
        if version_end_excluding is not None:
            self.version_end_excluding = version_end_excluding
        if version_end_including is not None:
            self.version_end_including = version_end_including
        if version_start_excluding is not None:
            self.version_start_excluding = version_start_excluding
        if version_start_including is not None:
            self.version_start_including = version_start_including
        if uuid is not None:
            self.uuid = uuid
        if affected_version_attributions is not None:
            self.affected_version_attributions = affected_version_attributions

    @property
    def identity_type(self):
        """Gets the identity_type of this AffectedComponent.  # noqa: E501


        :return: The identity_type of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this AffectedComponent.


        :param identity_type: The identity_type of this AffectedComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["CPE", "PURL"]  # noqa: E501
        if identity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `identity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(identity_type, allowed_values)
            )

        self._identity_type = identity_type

    @property
    def identity(self):
        """Gets the identity of this AffectedComponent.  # noqa: E501


        :return: The identity of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this AffectedComponent.


        :param identity: The identity of this AffectedComponent.  # noqa: E501
        :type: str
        """

        self._identity = identity

    @property
    def version_type(self):
        """Gets the version_type of this AffectedComponent.  # noqa: E501


        :return: The version_type of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._version_type

    @version_type.setter
    def version_type(self, version_type):
        """Sets the version_type of this AffectedComponent.


        :param version_type: The version_type of this AffectedComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["EXACT", "RANGE"]  # noqa: E501
        if version_type not in allowed_values:
            raise ValueError(
                "Invalid value for `version_type` ({0}), must be one of {1}"  # noqa: E501
                .format(version_type, allowed_values)
            )

        self._version_type = version_type

    @property
    def version(self):
        """Gets the version of this AffectedComponent.  # noqa: E501


        :return: The version of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AffectedComponent.


        :param version: The version of this AffectedComponent.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def version_end_excluding(self):
        """Gets the version_end_excluding of this AffectedComponent.  # noqa: E501


        :return: The version_end_excluding of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._version_end_excluding

    @version_end_excluding.setter
    def version_end_excluding(self, version_end_excluding):
        """Sets the version_end_excluding of this AffectedComponent.


        :param version_end_excluding: The version_end_excluding of this AffectedComponent.  # noqa: E501
        :type: str
        """

        self._version_end_excluding = version_end_excluding

    @property
    def version_end_including(self):
        """Gets the version_end_including of this AffectedComponent.  # noqa: E501


        :return: The version_end_including of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._version_end_including

    @version_end_including.setter
    def version_end_including(self, version_end_including):
        """Sets the version_end_including of this AffectedComponent.


        :param version_end_including: The version_end_including of this AffectedComponent.  # noqa: E501
        :type: str
        """

        self._version_end_including = version_end_including

    @property
    def version_start_excluding(self):
        """Gets the version_start_excluding of this AffectedComponent.  # noqa: E501


        :return: The version_start_excluding of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._version_start_excluding

    @version_start_excluding.setter
    def version_start_excluding(self, version_start_excluding):
        """Sets the version_start_excluding of this AffectedComponent.


        :param version_start_excluding: The version_start_excluding of this AffectedComponent.  # noqa: E501
        :type: str
        """

        self._version_start_excluding = version_start_excluding

    @property
    def version_start_including(self):
        """Gets the version_start_including of this AffectedComponent.  # noqa: E501


        :return: The version_start_including of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._version_start_including

    @version_start_including.setter
    def version_start_including(self, version_start_including):
        """Sets the version_start_including of this AffectedComponent.


        :param version_start_including: The version_start_including of this AffectedComponent.  # noqa: E501
        :type: str
        """

        self._version_start_including = version_start_including

    @property
    def uuid(self):
        """Gets the uuid of this AffectedComponent.  # noqa: E501


        :return: The uuid of this AffectedComponent.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AffectedComponent.


        :param uuid: The uuid of this AffectedComponent.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def affected_version_attributions(self):
        """Gets the affected_version_attributions of this AffectedComponent.  # noqa: E501


        :return: The affected_version_attributions of this AffectedComponent.  # noqa: E501
        :rtype: list[AffectedVersionAttribution]
        """
        return self._affected_version_attributions

    @affected_version_attributions.setter
    def affected_version_attributions(self, affected_version_attributions):
        """Sets the affected_version_attributions of this AffectedComponent.


        :param affected_version_attributions: The affected_version_attributions of this AffectedComponent.  # noqa: E501
        :type: list[AffectedVersionAttribution]
        """

        self._affected_version_attributions = affected_version_attributions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AffectedComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AffectedComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
