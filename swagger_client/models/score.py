# coding: utf-8

"""
    OWASP Dependency-Track

    REST API of OWASP Dependency-Track  # noqa: E501

    OpenAPI spec version: 4.13.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Score(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'likelihood_score': 'float',
        'technical_impact_score': 'float',
        'business_impact_score': 'float',
        'likelihood': 'str',
        'technical_impact': 'str',
        'business_impact': 'str'
    }

    attribute_map = {
        'likelihood_score': 'likelihoodScore',
        'technical_impact_score': 'technicalImpactScore',
        'business_impact_score': 'businessImpactScore',
        'likelihood': 'likelihood',
        'technical_impact': 'technicalImpact',
        'business_impact': 'businessImpact'
    }

    def __init__(self, likelihood_score=None, technical_impact_score=None, business_impact_score=None, likelihood=None, technical_impact=None, business_impact=None):  # noqa: E501
        """Score - a model defined in Swagger"""  # noqa: E501
        self._likelihood_score = None
        self._technical_impact_score = None
        self._business_impact_score = None
        self._likelihood = None
        self._technical_impact = None
        self._business_impact = None
        self.discriminator = None
        if likelihood_score is not None:
            self.likelihood_score = likelihood_score
        if technical_impact_score is not None:
            self.technical_impact_score = technical_impact_score
        if business_impact_score is not None:
            self.business_impact_score = business_impact_score
        if likelihood is not None:
            self.likelihood = likelihood
        if technical_impact is not None:
            self.technical_impact = technical_impact
        if business_impact is not None:
            self.business_impact = business_impact

    @property
    def likelihood_score(self):
        """Gets the likelihood_score of this Score.  # noqa: E501


        :return: The likelihood_score of this Score.  # noqa: E501
        :rtype: float
        """
        return self._likelihood_score

    @likelihood_score.setter
    def likelihood_score(self, likelihood_score):
        """Sets the likelihood_score of this Score.


        :param likelihood_score: The likelihood_score of this Score.  # noqa: E501
        :type: float
        """

        self._likelihood_score = likelihood_score

    @property
    def technical_impact_score(self):
        """Gets the technical_impact_score of this Score.  # noqa: E501


        :return: The technical_impact_score of this Score.  # noqa: E501
        :rtype: float
        """
        return self._technical_impact_score

    @technical_impact_score.setter
    def technical_impact_score(self, technical_impact_score):
        """Sets the technical_impact_score of this Score.


        :param technical_impact_score: The technical_impact_score of this Score.  # noqa: E501
        :type: float
        """

        self._technical_impact_score = technical_impact_score

    @property
    def business_impact_score(self):
        """Gets the business_impact_score of this Score.  # noqa: E501


        :return: The business_impact_score of this Score.  # noqa: E501
        :rtype: float
        """
        return self._business_impact_score

    @business_impact_score.setter
    def business_impact_score(self, business_impact_score):
        """Sets the business_impact_score of this Score.


        :param business_impact_score: The business_impact_score of this Score.  # noqa: E501
        :type: float
        """

        self._business_impact_score = business_impact_score

    @property
    def likelihood(self):
        """Gets the likelihood of this Score.  # noqa: E501


        :return: The likelihood of this Score.  # noqa: E501
        :rtype: str
        """
        return self._likelihood

    @likelihood.setter
    def likelihood(self, likelihood):
        """Sets the likelihood of this Score.


        :param likelihood: The likelihood of this Score.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIGH", "MEDIUM", "LOW"]  # noqa: E501
        if likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `likelihood` ({0}), must be one of {1}"  # noqa: E501
                .format(likelihood, allowed_values)
            )

        self._likelihood = likelihood

    @property
    def technical_impact(self):
        """Gets the technical_impact of this Score.  # noqa: E501


        :return: The technical_impact of this Score.  # noqa: E501
        :rtype: str
        """
        return self._technical_impact

    @technical_impact.setter
    def technical_impact(self, technical_impact):
        """Sets the technical_impact of this Score.


        :param technical_impact: The technical_impact of this Score.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIGH", "MEDIUM", "LOW"]  # noqa: E501
        if technical_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `technical_impact` ({0}), must be one of {1}"  # noqa: E501
                .format(technical_impact, allowed_values)
            )

        self._technical_impact = technical_impact

    @property
    def business_impact(self):
        """Gets the business_impact of this Score.  # noqa: E501


        :return: The business_impact of this Score.  # noqa: E501
        :rtype: str
        """
        return self._business_impact

    @business_impact.setter
    def business_impact(self, business_impact):
        """Sets the business_impact of this Score.


        :param business_impact: The business_impact of this Score.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIGH", "MEDIUM", "LOW"]  # noqa: E501
        if business_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `business_impact` ({0}), must be one of {1}"  # noqa: E501
                .format(business_impact, allowed_values)
            )

        self._business_impact = business_impact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Score, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Score):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
